{"version":3,"sources":["model/ServiceType.ts","redux/actions/ServiceActionTypes.ts","redux/actions/ServiceAction.ts","redux/thunks/ServiceThunk.ts","app/shared/DateInput.tsx","app/shared/TextInput.tsx","app/service/list/ServiceListItemActions.tsx","app/shared/CheckboxInput.tsx","app/shared/PickerInput.tsx","app/service/serviceItems/ServiceItemListItem.tsx","app/service/serviceItems/ServiceItems.tsx","model/ServiceItem.ts","app/service/list/ServiceListItem.tsx","app/service/list/ServiceList.tsx","app/service/list/ServiceListContainer.tsx","app/service/ServiceContainer.tsx","app/serviceActions/createService/CreateService.tsx","app/serviceActions/createService/CreateServiceContianer.tsx","model/Service.ts","redux/thunks/FileThunk.ts","app/serviceActions/downloadService/DownloadService.tsx","app/serviceActions/downloadService/DownloadServiceContainer.tsx","app/serviceActions/loadService/ServiceUpload.tsx","app/serviceActions/loadService/ServiceUploadContainer.tsx","app/serviceActions/ServiceActionsContainer.tsx","App.tsx","redux/reducers/ServiceReducer.ts","redux/configureStore.ts","index.tsx","redux/reducers/index.ts"],"names":["ServiceType","SERVICES_AVAILABLE","ServicesAvailableAction","services","type","payload","updateServiceAtIndexThunk","service","index","dispatch","getState","oldServices","servicesReducer","newServices","slice","swapArrayItemsAt","array","i","j","b","DateInput","props","value","onChange","className","utils","DateFnsUtils","disableToolbar","variant","format","margin","label","children","date","KeyboardButtonProps","TextInput","TextField","e","target","useStyles","makeStyles","theme","spacing","moveActions","width","display","ServiceListItemActions","totalCount","currentIndex","hasArrowUp","hasArrowDown","classes","IconButton","onClick","onServiceDeleteAction","onServiceMoveUpAction","ArrowUpward","onServiceMoveDownAction","ArrowDownward","CheckboxInput","FormControlLabel","control","Checkbox","checked","event","name","color","getDisplayNameForServiceType","serviceType","engineOil","frontBreaks","brakeFluid","microFilter","recirculatingAirFilter","rearBreaks","sparkPlugs","airFilter","fuelFilter","vehicleCheck","preDelivery","serviceInspection","statutoryInspection","emissionsTest","PickerInput","options","required","FormControl","InputLabel","Select","map","option","MenuItem","ServiceItemListItem","serviceItem","onServiceTypeChanged","onServiceItemDeleted","pickerOptions","newValue","container","item","darker","backgroundColor","ServiceItems","serviceItems","onServiceItemsChanged","Button","newServiceItems","status","List","component","ListItem","clsx","newType","onTypeChangedAtIndexAction","root","flexGrow","justifyContent","actions","ServiceListItem","onServiceDateUpdatedAction","onServiceMileageUpdatedAction","onServiceDealerUpdatedAction","onServiceBMWUpdatedAction","onServiceItemsUpdatedAction","Grid","xs","mileage","dealer","bmw","items","ServiceList","length","ServiceListContainer","useSelector","store","useDispatch","deleteServiceAtIndexThunk","oldService","newService","updateServiceDateAtIndexThunk","updateServiceDealerAtIndexThunk","updateServiceMileageAtIndexThunk","moveServiceUpwardsAtIndexThunk","moveServiceDownwardsAtIndexThunk","updateServiceBMWAtIndexThunk","updateServiceItemsAtIndexThunk","ServiceContainer","CreateService","onServiceCreateAction","CreateServiceContianer","Date","getServiceFromALine","line","parts","split","servicePart","parseInt","getServiceItemsFromAnArray","filter","_","itemsArray","push","getClearServiceLine","servicesToFileContent","startingIndex","s","serviceToString","join","getDate","getMonth","getFullYear","serviceItemsToString","saveToFileAction","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","DownloadService","onDowloadClick","DownloadServiceContainer","fileContent","ServiceUpload","onServiceUploaded","inputEl","useRef","ref","hidden","preventDefault","files","reader","FileReader","onload","a","result","toString","alert","readAsText","current","ServiceUploadContainer","serviceContent","lines","replaceAll","console","log","parseServiceFromFileThunk","ServiceActionsContainer","App","servicesReducerInitialState","ServicesReducer","state","action","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preloadedState","createStore","combineReducers","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.84a9774c.chunk.js","sourcesContent":["export enum ServiceType {\n    engineOil = \"1\",\n    frontBreaks = \"2\",\n    brakeFluid = \"3\",\n    microFilter = \"4\",\n    recirculatingAirFilter = \"5\",\n    rearBreaks = \"6\",\n    sparkPlugs = \"10\",\n    airFilter = \"11\",\n    fuelFilter = \"12\",\n    vehicleCheck = \"100\",\n    preDelivery = \"20\",\n    serviceInspection = \"21\",\n    statutoryInspection = \"32\",\n    emissionsTest = \"33\"\n};\n\nexport const getDisplayNameForServiceType = (serviceType: ServiceType): string => {\n    switch (serviceType) {\n        case ServiceType.engineOil: return \"Engine oil\";\n        case ServiceType.frontBreaks: return \"Front breaks\";\n        case ServiceType.brakeFluid: return \"Brake fluid\";\n        case ServiceType.microFilter: return \"Microfilter\";\n        case ServiceType.recirculatingAirFilter: return \"Recirculating air filter\";\n        case ServiceType.rearBreaks: return \"Rear breaks\";\n        case ServiceType.sparkPlugs: return \"Spark plugs\";\n        case ServiceType.airFilter: return \"Air filter\";\n        case ServiceType.fuelFilter: return \"Fuel filter\";\n        case ServiceType.vehicleCheck: return \"Vehicle check\";\n        case ServiceType.preDelivery: return \"Pre-delivery\";\n        case ServiceType.serviceInspection: return \"Service inspection\";\n        case ServiceType.statutoryInspection: return \"Statutory inspection\";\n        case ServiceType.emissionsTest: return \"Emissions test\";\n    }\n};\n\nexport const getServiceTypePickerOptions = (): {value: ServiceType, label: string}[] => {\n    return [\n        { value: ServiceType.engineOil, label: getDisplayNameForServiceType(ServiceType.engineOil) },\n        { value: ServiceType.frontBreaks, label: getDisplayNameForServiceType(ServiceType.frontBreaks) },\n        { value: ServiceType.brakeFluid, label: getDisplayNameForServiceType(ServiceType.brakeFluid) },\n        { value: ServiceType.microFilter, label: getDisplayNameForServiceType(ServiceType.microFilter) },\n        { value: ServiceType.recirculatingAirFilter, label: getDisplayNameForServiceType(ServiceType.recirculatingAirFilter) },\n        { value: ServiceType.rearBreaks, label: getDisplayNameForServiceType(ServiceType.rearBreaks) },\n        { value: ServiceType.sparkPlugs, label: getDisplayNameForServiceType(ServiceType.sparkPlugs) },\n        { value: ServiceType.airFilter, label: getDisplayNameForServiceType(ServiceType.airFilter) },\n        { value: ServiceType.fuelFilter, label: getDisplayNameForServiceType(ServiceType.fuelFilter) },\n        { value: ServiceType.vehicleCheck, label: getDisplayNameForServiceType(ServiceType.vehicleCheck) },\n        { value: ServiceType.preDelivery, label: getDisplayNameForServiceType(ServiceType.preDelivery) },\n        { value: ServiceType.serviceInspection, label: getDisplayNameForServiceType(ServiceType.serviceInspection) },\n        { value: ServiceType.statutoryInspection, label: getDisplayNameForServiceType(ServiceType.statutoryInspection) },\n        { value: ServiceType.emissionsTest, label: getDisplayNameForServiceType(ServiceType.emissionsTest) },\n    ];\n};\n","export const SERVICES_AVAILABLE = \"SERVICES_AVAILABLE\";\n","import Service from \"../../model/Service\";\nimport { SERVICES_AVAILABLE } from \"./ServiceActionTypes\";\n\nexport interface ServicesAvailable {\n    type: typeof SERVICES_AVAILABLE;\n    payload: Service[];\n}\nexport const ServicesAvailableAction = (services: Service[]): ServicesAvailable => {\n    return {\n        type: SERVICES_AVAILABLE,\n        payload: services,\n    };\n};\n\nexport type DispatchedServicesAction = \n    | ServicesAvailable;\n","import { AnyAction } from \"redux\"\nimport { ThunkDispatch } from \"redux-thunk\"\nimport Service, { createServiceObject } from \"../../model/Service\";\nimport ServiceItem from \"../../model/ServiceItem\";\nimport { ServicesAvailableAction } from \"../actions/ServiceAction\";\nimport { ApplicationStore } from \"../reducers\"\n\nexport const createServiceThunk = () => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const newServices: Service[] = [\n        createServiceObject(),\n        ...getState().servicesReducer.services,\n    ];\n    dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const updateServiceAtIndexThunk = (service: Service, index: number) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const oldServices = getState().servicesReducer.services;\n    const newServices: Service[] = [\n        ...oldServices.slice(0, index),\n        service,\n        ...oldServices.slice(index + 1),\n    ];\n    dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const deleteServiceAtIndexThunk = (index: number) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const oldServices = getState().servicesReducer.services;\n    const newServices: Service[] = [\n        ...oldServices.slice(0, index),\n        ...oldServices.slice(index + 1),\n    ];\n    dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const updateServiceDateAtIndexThunk = (index: number, newValue: Date) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const oldService = getState().servicesReducer.services[index];\n    if (!oldService) {\n        return\n    }\n    const newService: Service = {\n        ...oldService,\n        date: newValue,\n    };\n    dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceMileageAtIndexThunk = (index: number, newValue: string) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const oldService = getState().servicesReducer.services[index];\n    if (!oldService) {\n        return\n    }\n    const newService: Service = {\n        ...oldService,\n        mileage: +newValue || oldService.mileage,\n    };\n    dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceDealerAtIndexThunk = (index: number, newValue: string) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const oldService = getState().servicesReducer.services[index];\n    if (!oldService) {\n        return\n    }\n    const newService: Service = {\n        ...oldService,\n        dealer: newValue,\n    };\n    dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceBMWAtIndexThunk = (index: number, newValue: boolean) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const oldService = getState().servicesReducer.services[index];\n    if (!oldService) {\n        return\n    }\n    const newService: Service = {\n        ...oldService,\n        bmw: newValue,\n    };\n    dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceItemsAtIndexThunk = (index: number, newValue: ServiceItem[]) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const oldService = getState().servicesReducer.services[index];\n    if (!oldService) {\n        return\n    }\n    const newService: Service = {\n        ...oldService,\n        items: newValue,\n    };\n    dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\n// Swap\nconst swapArrayItemsAt = (array: Object[], i: number, j: number) => {\n    var b = array[i];\n    array[i] = array[j];\n    array[j] = b;\n    return array;\n};\n\nexport const moveServiceUpwardsAtIndexThunk = (index: number) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const newServices: Service[] = [ ...getState().servicesReducer.services ];\n    if (index <= 0 || index >= newServices.length ) {\n        return;\n    }\n    swapArrayItemsAt(newServices, index, index - 1);\n    dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const moveServiceDownwardsAtIndexThunk = (index: number) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const newServices: Service[] = [ ...getState().servicesReducer.services ];\n    if (index < 0 || index >= newServices.length - 1) {\n        return;\n    }\n    swapArrayItemsAt(newServices, index, index + 1);\n    dispatch(ServicesAvailableAction(newServices));\n};\n","import React, { PropsWithChildren } from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport { MuiPickersUtilsProvider, KeyboardDatePicker } from '@material-ui/pickers';\n\nexport interface DateInputProps {\n    value: Date,\n    onChange: (value: Date) => void,\n    className?: string,\n}\n \nconst DateInput: React.FC<PropsWithChildren<DateInputProps>> = (props) => {\n    const { value, onChange, className } = props;\n\n    const handleDateChange = (date: Date | null) => {\n        onChange(date || value);\n    };\n\n    return (\n        <>\n        <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            <KeyboardDatePicker\n                disableToolbar\n                variant=\"inline\"\n                format=\"dd.MM.yyyy\"\n                margin=\"normal\"\n                label={props.children}\n                value={value}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                    'aria-label': 'change date',\n                }}\n                className={className}\n            />\n        </MuiPickersUtilsProvider>\n        </>\n     );\n}\n \nexport default DateInput;\n","import React, { ChangeEvent, PropsWithChildren } from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nexport interface TextInputProps {\n    value: any,\n    onChange: (value: string) => void,\n    className?: string,\n}\n \nconst TextInput: React.FC<PropsWithChildren<TextInputProps>> = (props) => {\n    const { value, onChange, className } = props;\n\n    const fieldChanged = (e: ChangeEvent<HTMLInputElement>) => {\n        onChange(e.target.value);\n    };\n\n    return (\n        <>\n            <TextField\n                label={props.children}\n                value={value}\n                onChange={fieldChanged}\n                className={className}\n            />\n        </>\n     );\n}\n \nexport default TextInput;","import { IconButton } from \"@material-ui/core\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\nimport { ArrowDownward, ArrowUpward } from \"@material-ui/icons\";\n\nexport interface ServiceListItemActionsProps {\n    className?: string,\n    totalCount: number,\n    currentIndex: number,\n    onServiceDeleteAction: (index: number) => void,\n    onServiceMoveUpAction: (index: number) => void,\n    onServiceMoveDownAction: (index: number) => void,\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(1),\n    },\n    moveActions: {\n        width: theme.spacing(16),\n        display: 'inline-block',\n    },\n}));\n\nconst ServiceListItemActions: React.FC<ServiceListItemActionsProps> = (props) => {\n    const { className, totalCount, currentIndex } = props;\n\n    const hasArrowUp = currentIndex > 0;\n    const hasArrowDown = currentIndex < totalCount - 1;\n\n    const classes = useStyles();\n\n    const onDeleteAction = () => {\n        props.onServiceDeleteAction(currentIndex);\n    };\n    const onMoveUpAction = () => {\n        props.onServiceMoveUpAction(currentIndex);\n    };\n    const onMoveDownAction = () => {\n        props.onServiceMoveDownAction(currentIndex);\n    };\n\n\n    return ( \n        <div className={className}>\n            <IconButton aria-label=\"delete\" className={classes.margin} onClick={onDeleteAction}>\n                <DeleteIcon />\n            </IconButton>\n            <div className={classes.moveActions}>\n                {hasArrowUp && <IconButton aria-label=\"move_up\" className={classes.margin} onClick={onMoveUpAction}><ArrowUpward /></IconButton>}\n                {hasArrowDown && <IconButton aria-label=\"move_down\" className={classes.margin} onClick={onMoveDownAction}><ArrowDownward /></IconButton>}\n            </div>\n        </div> \n    );\n}\n \nexport default ServiceListItemActions;","import { Checkbox, FormControlLabel } from \"@material-ui/core\";\nimport { PropsWithChildren } from \"react\";\n\nexport interface CheckboxInputProps {\n    value: boolean,\n    onChange: (newValue: boolean) => void,\n    className?: string,\n};\n \nconst CheckboxInput: React.FC<PropsWithChildren<CheckboxInputProps>> = (props) => {\n    const { value, onChange, className } = props;\n\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        onChange(event.target.checked);\n    };\n\n    return ( \n        <>\n            <FormControlLabel\n                control={\n                <Checkbox\n                    checked={value}\n                    onChange={handleChange}\n                    name=\"checkedB\"\n                    color=\"primary\"\n                />\n                }\n                label={props.children}\n                className={className}\n            />\n        </>\n    );\n};\n \nexport default CheckboxInput;\n","import { FormControl, InputLabel, MenuItem, Select } from \"@material-ui/core\";\nimport { PropsWithChildren } from \"react\";\n\nexport interface PickerInputProps {\n    className?: string;\n    required?: boolean;\n    value: string;\n    options: {value: string, label: string}[];\n    onChange: (newValue: string) => void;\n}\n\nconst PickerInput: React.SFC<PropsWithChildren<PickerInputProps>> = (props) => {\n    const { className, options, value, onChange, required } = props;\n\n    const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n        onChange(event.target.value as string);\n    };\n\n    return ( \n        <>\n            <FormControl required={required}>\n                <InputLabel>{props.children}</InputLabel>\n                <Select\n                    value={value}\n                    onChange={handleChange}\n                    className={className}\n                >\n                    { options.map(option => <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>) }\n                </Select>\n            </FormControl>\n        </>\n     );\n}\n \nexport default PickerInput;","import { IconButton } from \"@material-ui/core\";\nimport ServiceItem from \"../../../model/ServiceItem\";\nimport { getServiceTypePickerOptions, ServiceType } from \"../../../model/ServiceType\";\nimport PickerInput from \"../../shared/PickerInput\";\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport { makeStyles } from '@material-ui/core/styles';\n\nexport interface ServiceItemListItemProps {\n    serviceItem: ServiceItem;\n    onServiceTypeChanged: (ServiceType: ServiceType) => void;\n    onServiceItemDeleted: () => void;\n}\n \nconst useStyles = makeStyles((theme) => ({\n    margin: {\n      margin: theme.spacing(1),\n    },\n    moveActions: {\n        width: theme.spacing(16),\n        display: 'inline-block',\n    },\n}));\n\nconst ServiceItemListItem: React.FC<ServiceItemListItemProps> = (props) => {\n    const { serviceItem, onServiceTypeChanged, onServiceItemDeleted } = props;\n\n    const classes = useStyles();\n\n    const pickerOptions = getServiceTypePickerOptions();\n\n    const onPickerChanged = (newValue: string) => {\n        const newType: ServiceType = newValue as ServiceType;\n        onServiceTypeChanged(newType);\n    };\n\n    const onDeleteAction = () => {\n        onServiceItemDeleted();\n    };\n    \n    return ( \n        <>\n            <PickerInput value={serviceItem.serviceType} options={pickerOptions} onChange={onPickerChanged}>Service type</PickerInput>\n            <IconButton aria-label=\"delete\" className={classes.margin} onClick={onDeleteAction}>\n                <DeleteIcon />\n            </IconButton>\n        </>\n     );\n}\n \nexport default ServiceItemListItem;","import { Button, List, ListItem } from \"@material-ui/core\";\nimport ServiceItem, { createServiceItemObject } from \"../../../model/ServiceItem\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport ServiceItemListItem from \"./ServiceItemListItem\";\nimport { ServiceType } from \"../../../model/ServiceType\";\n\nexport interface ServiceItemsProps {\n    serviceItems: ServiceItem[];\n    onServiceItemsChanged: (items: ServiceItem[]) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n    container: {},\n    item: {\n        width: '100%',\n        margin: 'auto',\n    },\n    darker: {\n        backgroundColor: '#ddd',\n    },\n}));\n\n\nconst ServiceItems: React.FC<ServiceItemsProps> = (props) => {\n    const { serviceItems, onServiceItemsChanged } = props;\n\n    const classes = useStyles();\n\n    const onTypeChangedAtIndexAction = (newType: ServiceType, index: number) => {\n        const newServiceItems = [ ...serviceItems ];\n        newServiceItems[index].serviceType = newType;\n        onServiceItemsChanged(newServiceItems);\n    };\n\n    const onServiceItemCreateAction = () => {\n        const newServiceItems = [ createServiceItemObject(), ...serviceItems ];\n        onServiceItemsChanged(newServiceItems);\n    };\n\n    const onServiceItemDeleted = (index: number) => {\n        const newServiceItems = [ ...serviceItems.slice(0, index), ...serviceItems.slice(index + 1) ];\n        onServiceItemsChanged(newServiceItems);\n    };\n\n    return (\n        <>\n            <Button variant=\"outlined\" color=\"primary\" onClick={onServiceItemCreateAction}>Add Service Item</Button>\n            <List className={classes.container} component=\"nav\" aria-label=\"main mailbox folders\">\n                {serviceItems && serviceItems.map((serviceItem, i) => {\n                    return (\n                        <ListItem key={i} className={clsx(classes.item, i % 2 && classes.darker)}>\n                            <ServiceItemListItem \n                                serviceItem={serviceItem} \n                                onServiceTypeChanged={(newType) => onTypeChangedAtIndexAction(newType, i)}\n                                onServiceItemDeleted={() => onServiceItemDeleted(i)}\n                            />\n                        </ListItem>\n                    )\n                })}\n            </List>\n        </>\n     );\n}\n \nexport default ServiceItems;","export default interface ServiceItem {\n    status: string;\n    serviceType: string;\n};\n\nexport const createServiceItemObject = (): ServiceItem => ({\n    status: \"0x1\",\n    serviceType: \"1\",\n});\n","import { FC } from \"react\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport Service from \"../../../model/Service\";\nimport DateInput from \"../../shared/DateInput\";\nimport TextInput from \"../../shared/TextInput\";\nimport ServiceListItemActions from \"./ServiceListItemActions\";\nimport CheckboxInput from \"../../shared/CheckboxInput\";\nimport ServiceItem from \"../../../model/ServiceItem\";\nimport ServiceItems from \"../serviceItems/ServiceItems\";\nimport { Grid } from \"@material-ui/core\";\n\nexport interface ServiceListItemProps {\n    currentIndex: number,\n    totalCount: number,\n    service: Service,\n    onServiceDeleteAction: (index: number) => void,\n    onServiceDateUpdatedAction: (index: number, newValue: Date) => void,\n    onServiceMileageUpdatedAction: (index: number, newValue: string) => void,\n    onServiceDealerUpdatedAction: (index: number, newValue: string) => void,\n    onServiceBMWUpdatedAction: (index: number, newValue: boolean) => void,\n    onServiceItemsUpdatedAction: (index: number, newValue: ServiceItem[]) => void,\n    onServiceMoveUpAction: (index: number) => void,\n    onServiceMoveDownAction: (index: number) => void,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        flexGrow: 1,\n        justifyContent: 'center',\n    },\n    margin: {\n      margin: theme.spacing(1),\n    },\n    actions: {\n        display: 'inline',\n    },\n}));\n\nconst ServiceListItem: FC<ServiceListItemProps> = (props: ServiceListItemProps) => {\n    const { \n        service, \n        currentIndex, \n        onServiceDateUpdatedAction, \n        onServiceMileageUpdatedAction, \n        onServiceDealerUpdatedAction,\n        onServiceBMWUpdatedAction,\n        onServiceItemsUpdatedAction,\n    } = props;\n\n    const classes = useStyles();\n\n    const onDateUpdateAction = (date: Date) => {\n        onServiceDateUpdatedAction(currentIndex, date);\n    };\n\n    const onMileageUpdateAction = (mileage: string) => {\n        onServiceMileageUpdatedAction(currentIndex, mileage);\n    };\n\n    const onDealerUpdateAction = (dealer: string) => {\n        onServiceDealerUpdatedAction(currentIndex, dealer);\n    };\n\n    const onBMWUpdateAction = (bmw: boolean) => {\n        onServiceBMWUpdatedAction(currentIndex, bmw);\n    };\n\n    const onItemsUpdateAction = (items: ServiceItem[]) => {\n        onServiceItemsUpdatedAction(currentIndex, items);\n    };\n\n    return (\n        <div className={classes.root}>\n            <Grid container spacing={3}>\n                <Grid item xs={12}>\n                    <DateInput className={classes.margin} value={service.date} onChange={onDateUpdateAction}>Date of service</DateInput>\n                    <TextInput className={classes.margin} value={service.mileage} onChange={onMileageUpdateAction}>Mileage</TextInput>\n                    <TextInput className={classes.margin} value={service.dealer} onChange={onDealerUpdateAction}>Dealer</TextInput>\n                    <CheckboxInput className={classes.margin} value={service.bmw} onChange={onBMWUpdateAction}>BMW</CheckboxInput>\n                    <ServiceListItemActions className={classes.actions} {...props} />\n                </Grid>\n                <Grid item xs={12}>\n                    <ServiceItems serviceItems={service.items} onServiceItemsChanged={onItemsUpdateAction} />\n                </Grid>\n            </Grid>\n        </div>\n    );\n};\n\nexport default ServiceListItem;","import { FC } from \"react\";\nimport Service from \"../../../model/Service\";\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ServiceListItem from \"./ServiceListItem\";\nimport { makeStyles } from '@material-ui/core/styles';\nimport clsx from 'clsx';\nimport ServiceItem from \"../../../model/ServiceItem\";\n\nexport interface ServiceListProps {\n    services: Service[],\n    onServiceDeleteAction: (index: number) => void,\n    onServiceDateUpdatedAction: (index: number, newValue: Date) => void,\n    onServiceMileageUpdatedAction: (index: number, newValue: string) => void,\n    onServiceDealerUpdatedAction: (index: number, newValue: string) => void,\n    onServiceBMWUpdatedAction: (index: number, newValue: boolean) => void,\n    onServiceItemsUpdatedAction: (index: number, newValue: ServiceItem[]) => void,\n    onServiceMoveUpAction: (index: number) => void,\n    onServiceMoveDownAction: (index: number) => void,\n};\n\nconst useStyles = makeStyles((theme) => ({\n    container: {},\n    item: {\n        width: '100%',\n        margin: 'auto',\n    },\n    darker: {\n        backgroundColor: '#ddd',\n    },\n}));\n\n\nconst ServiceList: FC<ServiceListProps> = (props: ServiceListProps) => {\n    const { services } = props;\n\n    const classes = useStyles();\n\n    return (\n        <List className={classes.container} component=\"nav\" aria-label=\"main mailbox folders\">\n            {services && services.map((service, i) => {\n                return (\n                    <ListItem key={i} className={clsx(classes.item, i % 2 && classes.darker)}>\n                        <ServiceListItem \n                            service={service} \n                            currentIndex={i} \n                            totalCount={services.length} \n                            {...props}\n                        />\n                    </ListItem>\n                )\n            })}\n        </List>\n    )\n}\n\nexport default ServiceList;","import { FC } from \"react\";\nimport { useSelector, useDispatch } from \"react-redux\";\nimport ServiceItem from \"../../../model/ServiceItem\";\nimport { ApplicationStore } from \"../../../redux/reducers\";\nimport { deleteServiceAtIndexThunk, moveServiceDownwardsAtIndexThunk, moveServiceUpwardsAtIndexThunk, updateServiceBMWAtIndexThunk, updateServiceDateAtIndexThunk, updateServiceDealerAtIndexThunk, updateServiceItemsAtIndexThunk, updateServiceMileageAtIndexThunk } from \"../../../redux/thunks/ServiceThunk\";\nimport ServiceList from \"./ServiceList\";\n\n\nconst ServiceListContainer: FC = () => {\n    const { services } = useSelector((store: ApplicationStore) => store.servicesReducer);\n    const dispatch = useDispatch();\n\n    const onServiceDeleteAction = (index: number) => {\n        dispatch(deleteServiceAtIndexThunk(index));\n    };\n\n    const onServiceDateUpdatedAction = (index: number, newValue: Date) => {\n        dispatch(updateServiceDateAtIndexThunk(index, newValue));\n    };\n\n    const onServiceMileageUpdatedAction = (index: number, newValue: string) => {\n        dispatch(updateServiceMileageAtIndexThunk(index, newValue));\n    };\n\n    const onServiceDealerUpdatedAction = (index: number, newValue: string) => {\n        dispatch(updateServiceDealerAtIndexThunk(index, newValue));\n    };\n\n    const onServiceBMWUpdatedAction = (index: number, newValue: boolean) => {\n        dispatch(updateServiceBMWAtIndexThunk(index, newValue));\n    };\n\n    const onServiceItemsUpdatedAction = (index: number, newValue: ServiceItem[]) => {\n        dispatch(updateServiceItemsAtIndexThunk(index, newValue));\n    };\n\n    const onServiceMoveUpAction = (index: number) => {\n        dispatch(moveServiceUpwardsAtIndexThunk(index));\n    };\n\n    const onServiceMoveDownAction = (index: number) => {\n        dispatch(moveServiceDownwardsAtIndexThunk(index));\n    };\n\n    return ( \n        <>\n            <ServiceList \n                services={services} \n                onServiceDeleteAction={onServiceDeleteAction}\n                onServiceDateUpdatedAction={onServiceDateUpdatedAction}\n                onServiceDealerUpdatedAction={onServiceDealerUpdatedAction}\n                onServiceMileageUpdatedAction={onServiceMileageUpdatedAction}\n                onServiceMoveUpAction={onServiceMoveUpAction}\n                onServiceMoveDownAction={onServiceMoveDownAction}\n                onServiceBMWUpdatedAction={onServiceBMWUpdatedAction}\n                onServiceItemsUpdatedAction={onServiceItemsUpdatedAction}\n            />\n        </>\n     );\n}\n \nexport default ServiceListContainer;","import { FunctionComponent } from \"react\";\nimport ServiceListContainer from \"./list/ServiceListContainer\";\n\nconst ServiceContainer: FunctionComponent = () => {\n\n    return (\n        <>\n            <ServiceListContainer />\n        </>\n    );\n}\n\nexport default ServiceContainer;","import { Button } from \"@material-ui/core\";\nimport { FC } from \"react\";\n\nexport interface CreateServiceProps {\n    onServiceCreateAction: () => void;\n}\n \nconst CreateService: FC<CreateServiceProps> = (props) => {\n    const { onServiceCreateAction } = props;\n    \n    return ( <Button variant=\"outlined\" color=\"primary\" onClick={onServiceCreateAction}>Add Service</Button> );\n};\n \nexport default CreateService;","import { useDispatch } from \"react-redux\";\nimport { createServiceThunk } from \"../../../redux/thunks/ServiceThunk\";\nimport CreateService from \"./CreateService\";\n\n \nconst CreateServiceContianer: React.FC = () => {\n    const dispatch = useDispatch();\n\n    const onServiceCreateAction = () => {\n        dispatch(createServiceThunk());\n    };\n\n    return (\n        <CreateService onServiceCreateAction={onServiceCreateAction} />\n    );\n}\n \nexport default CreateServiceContianer;","import ServiceItem from \"./ServiceItem\";\n\nexport default interface Service {\n    date: Date;\n    mileage: number;\n    dealer: string;\n    bmw: boolean;\n    status: string;\n    items: ServiceItem[];\n};\n\nexport const createServiceObject = (): Service => ({\n    date: new Date(),\n    mileage: 0,\n    dealer: \"\",\n    bmw: false,\n    status: \"1\",\n    items: [],\n});\n","import { AnyAction } from \"redux\";\nimport { ThunkDispatch } from \"redux-thunk\";\nimport Service from \"../../model/Service\";\nimport ServiceItem, { createServiceItemObject } from \"../../model/ServiceItem\";\nimport { ServiceType } from \"../../model/ServiceType\";\nimport { ServicesAvailableAction } from \"../actions/ServiceAction\";\nimport { ApplicationStore } from \"../reducers\";\n\nexport const parseServiceFromFileThunk = (serviceContent: string) => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const lines = serviceContent.split(\"\\n\").map(line => line.replaceAll(\"\\r\", \"\"));\n    //3|g_mmi|steuern_servicehistory_add||18;1;2021;0;173890;0;00081;0x1;6;1;0x1;0;0;12;0x1;0;0;5;0x1;0;0;4;0x1;0;0;100;0x1;0;0;11;0x1;0;0\n\n    console.log(lines);\n    // manage the first line\n    let index = 1;\n    let services: Service[] = [];\n    for (; index < lines.length; index++) {\n        const service = getServiceFromALine(lines[index]);\n        service && services.push(service);\n    }\n    dispatch(ServicesAvailableAction(services));\n};\n\nconst getServiceFromALine = (line: string): Service | null => {\n    const parts = line.split(\"|\");\n    if (parts.length <= 4) {\n        return null;\n    }\n    const servicePart = parts[4].split(\";\");\n    if (servicePart.length < 8) {\n        return null;\n    }\n    return {\n        date: new Date(parseInt(servicePart[2]), parseInt(servicePart[1]) - 1, parseInt(servicePart[0])),\n        mileage: parseInt(servicePart[4]),\n        dealer: servicePart[6],\n        bmw: servicePart[5] === '1',\n        status: '0x1',  // TODO: support status type\n        items: getServiceItemsFromAnArray(servicePart.filter((_, i) => i > 7)),\n    };\n};\n\nconst getServiceItemsFromAnArray = (array: string[]): ServiceItem[] => {\n    if (!array.length) {\n        return [];\n    }\n    const size = parseInt(array[0]);\n    if (size * 4 + 1 !== array.length) {\n        return [];\n    }\n    const itemsArray = array.slice(1);\n    const items: ServiceItem[] = [];\n    for (let index = 0; index < itemsArray.length; ) {\n        items.push({\n            ...createServiceItemObject(),\n            serviceType: itemsArray[index] as ServiceType,\n        });\n        index += 4;\n    }\n    return items;\n};\n\nexport const saveToFileThunk = () => (dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>, getState: () => ApplicationStore) => {\n    const services = getState().servicesReducer.services;\n    const fileContent = getClearServiceLine() + servicesToFileContent(services, 2);\n    saveToFileAction(\"service.tst\", fileContent);\n};\n\nconst getClearServiceLine = (): string => {\n    return \"1|g_mmi|steuern_servicehistory_erase\\n\";\n};\n\nconst servicesToFileContent = (services: Service[], startingIndex: number = 1): string => {\n    return services.map((s, i) => serviceToString(s, i + startingIndex)).join(\"\\n\");\n};\n\n//3|g_mmi|steuern_servicehistory_add||18;1;2021;0;173890;0;00081;0x1;6;1;0x1;0;0;12;0x1;0;0;5;0x1;0;0;4;0x1;0;0;100;0x1;0;0;11;0x1;0;0\nconst serviceToString = (service: Service, index: number): string => {\n    return \"\" + index + \"|g_mmi|steuern_servicehistory_add||\" + \n    service.date.getDate() + \";\" + (service.date.getMonth() + 1) + \";\" + service.date.getFullYear() +\n    \";0;\" + service.mileage + \";\" + (service.bmw ? \"1\" : \"0\") + \";\" + service.dealer + \";0x1;\" +\n    serviceItemsToString(service.items);\n};\n\nconst serviceItemsToString = (items: ServiceItem[]): string => {\n    return \"\" + items.length + \";\" + items.map(item => \"\" + item.serviceType + \";\" + item.status + \";0;0\").join(\";\");\n}\n\nconst saveToFileAction = (filename: string, text: string) => {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', filename);\n  \n    element.style.display = 'none';\n    document.body.appendChild(element);\n  \n    element.click();\n  \n    document.body.removeChild(element);\n}\n","import { Button } from \"@material-ui/core\";\n\nexport interface DownloadServiceProps {\n    onDowloadClick: () => void;\n};\n \nconst DownloadService: React.FC<DownloadServiceProps> = (props) => {\n    const { onDowloadClick } = props;\n    return (<Button variant=\"outlined\" color=\"primary\" onClick={onDowloadClick}>Save Services to file</Button>);\n}\n \nexport default DownloadService;","import { FC } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { saveToFileThunk } from \"../../../redux/thunks/FileThunk\";\nimport DownloadService from \"./DownloadService\";\n \nconst DownloadServiceContainer: FC = () => {\n    const dispatch = useDispatch();\n\n    const onDowloadAction = () => {\n        dispatch(saveToFileThunk());\n    };\n\n    return ( \n        <>\n            <DownloadService onDowloadClick={onDowloadAction}/>\n        </>\n     );\n}\n \nexport default DownloadServiceContainer;","import { Button } from \"@material-ui/core\";\nimport { ChangeEvent, useRef } from \"react\";\n\nexport interface FileUploadProps {\n    onServiceUploaded: (fileContent: string) => void;\n};\n\nconst ServiceUpload: React.FC<FileUploadProps> = (props) => {\n    const { onServiceUploaded } = props;\n    const inputEl = useRef(null);\n\n    const openInput = () => {\n        inputEl.current && ((inputEl.current as unknown) as HTMLInputElement).click()\n    };\n\n    const parseFile = (e: ChangeEvent<HTMLInputElement>) => {\n        e.preventDefault()\n        if (!e.target || !e.target.files || !e.target.files.length) {\n            return;\n        }\n        \n        const reader = new FileReader()\n        reader.onload = async (e) => {\n            const text = e.target && e.target.result?.toString();\n            if (text) {\n                onServiceUploaded(text);\n            } else {\n                alert(\"Something went wrong. Try again\");\n            }\n        };\n        reader.readAsText(e.target.files[0])\n    };\n\n    return (\n        <>\n            <input ref={inputEl} type='file' hidden onChange={parseFile}/>\n            <Button variant=\"outlined\" color=\"primary\" onClick={openInput}>Upload Service file</Button>\n        </>\n     );\n}\n \nexport default ServiceUpload;","import { FC } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { parseServiceFromFileThunk } from \"../../../redux/thunks/FileThunk\";\nimport ServiceUpload from \"./ServiceUpload\";\n\nconst ServiceUploadContainer: FC = () => {\n    const dispatch = useDispatch();\n\n    const onServiceUploaded = (serviceContent: string) => {\n        dispatch(parseServiceFromFileThunk(serviceContent));\n    };\n\n    return (\n        <> \n            <ServiceUpload onServiceUploaded={onServiceUploaded}/>\n        </>\n    );\n}\n \nexport default ServiceUploadContainer;","import { FC } from \"react\";\nimport CreateServiceContianer from \"./createService/CreateServiceContianer\";\nimport DownloadServiceContainer from \"./downloadService/DownloadServiceContainer\";\nimport ServiceUploadContainer from \"./loadService/ServiceUploadContainer\";\n\nconst ServiceActionsContainer: FC = () => {\n    return (\n        <> \n            <ServiceUploadContainer />\n            <CreateServiceContianer />\n            <DownloadServiceContainer />\n        </>\n    );\n}\n \nexport default ServiceActionsContainer;","import './App.css';\nimport ServiceContainer from './app/service/ServiceContainer';\nimport ServiceActionsContainer from './app/serviceActions/ServiceActionsContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <ServiceActionsContainer />\n        <ServiceContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import Service from \"../../model/Service\";\nimport { DispatchedServicesAction } from \"../actions/ServiceAction\"\nimport { SERVICES_AVAILABLE } from \"../actions/ServiceActionTypes\"\n\nexport interface ServicesReducerStore {\n    services: Service[];\n}\n\nexport const servicesReducerInitialState: ServicesReducerStore = {\n    services: [],\n}\n\nconst ServicesReducer = (state = servicesReducerInitialState, action: DispatchedServicesAction): ServicesReducerStore => {\n    switch (action.type) {\n        case SERVICES_AVAILABLE:\n            return {\n                ...state,\n                services: action.payload,\n            };\n        default:\n            return {\n                ...state,\n            };\n    }\n};\nexport default ServicesReducer;","import { Action, AnyAction, createStore, Store, compose, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport { ApplicationStore, reducers } from './reducers';\n\nconst composeEnhancer = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport default function condfigureStore(preloadedState?: ApplicationStore): Store<ApplicationStore> {\n  return createStore<ApplicationStore, Action<AnyAction>, unknown, unknown>(\n    reducers(),\n    preloadedState,\n    composeEnhancer(applyMiddleware(thunk, logger))\n  );  \n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport configureStore from './redux/configureStore';\nimport { Provider } from 'react-redux';\n\nexport const store = configureStore();\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n","import { combineReducers, Reducer } from \"redux\";\nimport ServicesReducer, { ServicesReducerStore } from \"./ServiceReducer\";\n\nexport interface ApplicationStore {\n    servicesReducer: ServicesReducerStore;\n}\n\nexport const reducers = (): Reducer<ApplicationStore> => combineReducers<ApplicationStore>({\n    servicesReducer: ServicesReducer,\n});\n"],"sourceRoot":""}