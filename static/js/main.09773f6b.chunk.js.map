{"version":3,"sources":["model/ServiceType.ts","redux/actions/ServiceActionTypes.ts","redux/actions/ServiceAction.ts","redux/thunks/ServiceThunk.ts","app/shared/DateInput.tsx","app/shared/TextInput.tsx","app/service/list/ServiceListItemActions.tsx","app/shared/CheckboxInput.tsx","app/shared/PickerInput.tsx","app/service/serviceItems/ServiceItemListItem.tsx","app/service/serviceItems/ServiceItems.tsx","model/ServiceItem.ts","app/service/list/ServiceListItem.tsx","app/service/list/ServiceList.tsx","app/service/list/ServiceListContainer.tsx","app/service/ServiceContainer.tsx","app/serviceActions/createService/CreateService.tsx","app/serviceActions/createService/CreateServiceContianer.tsx","model/Service.ts","redux/thunks/FileThunk.ts","app/serviceActions/downloadService/DownloadService.tsx","app/serviceActions/downloadService/DownloadServiceContainer.tsx","app/serviceActions/loadService/ServiceUpload.tsx","app/serviceActions/loadService/ServiceUploadContainer.tsx","app/serviceActions/ServiceActionsContainer.tsx","App.tsx","redux/reducers/ServiceReducer.ts","redux/configureStore.ts","index.tsx","redux/reducers/index.ts"],"names":["ServiceType","SERVICES_AVAILABLE","ServicesAvailableAction","services","type","payload","updateServiceAtIndexThunk","service","index","dispatch","getState","oldServices","servicesReducer","newServices","slice","swapArrayItemsAt","array","i","j","b","DateInput","props","value","onChange","className","utils","DateFnsUtils","disableToolbar","variant","format","margin","label","children","date","KeyboardButtonProps","TextInput","TextField","e","target","useStyles","makeStyles","theme","spacing","moveActions","width","display","ServiceListItemActions","totalCount","currentIndex","hasArrowUp","hasArrowDown","classes","IconButton","onClick","onServiceDeleteAction","onServiceMoveUpAction","ArrowUpward","onServiceMoveDownAction","ArrowDownward","CheckboxInput","FormControlLabel","control","Checkbox","checked","event","name","color","getDisplayNameForServiceType","serviceType","engineOil","frontBreaks","brakeFluid","microFilter","recirculatingAirFilter","rearBreaks","sparkPlugs","airFilter","fuelFilter","vehicleCheck","preDelivery","serviceInspection","statutoryInspection","emissionsTest","PickerInput","options","required","FormControl","InputLabel","Select","map","option","MenuItem","item","picker","ServiceItemListItem","serviceItem","onServiceTypeChanged","onServiceItemDeleted","pickerOptions","newValue","container","maxHeight","overflow","ServiceItems","serviceItems","onServiceItemsChanged","Button","newServiceItems","status","List","component","ListItem","newType","onTypeChangedAtIndexAction","root","flexGrow","justifyContent","actions","ServiceListItem","onServiceDateUpdatedAction","onServiceMileageUpdatedAction","onServiceDealerUpdatedAction","onServiceBMWUpdatedAction","onServiceItemsUpdatedAction","Grid","xs","mileage","dealer","bmw","items","borderBottom","ServiceList","length","ServiceListContainer","useSelector","store","useDispatch","deleteServiceAtIndexThunk","oldService","newService","updateServiceDateAtIndexThunk","updateServiceDealerAtIndexThunk","updateServiceMileageAtIndexThunk","moveServiceUpwardsAtIndexThunk","moveServiceDownwardsAtIndexThunk","updateServiceBMWAtIndexThunk","updateServiceItemsAtIndexThunk","ServiceContainer","CreateService","onServiceCreateAction","CreateServiceContianer","Date","getServiceFromALine","line","parts","split","servicePart","parseInt","getServiceItemsFromAnArray","filter","_","itemsArray","push","getClearServiceLine","servicesToFileContent","startingIndex","s","serviceToString","join","getDate","getMonth","getFullYear","serviceItemsToString","saveToFileAction","filename","text","element","document","createElement","setAttribute","encodeURIComponent","style","body","appendChild","click","removeChild","DownloadService","onDowloadClick","DownloadServiceContainer","fileContent","ServiceUpload","onServiceUploaded","inputEl","useRef","ref","hidden","preventDefault","files","reader","FileReader","onload","a","result","toString","alert","readAsText","current","ServiceUploadContainer","serviceContent","lines","replaceAll","console","log","parseServiceFromFileThunk","ServiceActionsContainer","App","servicesReducerInitialState","ServicesReducer","state","action","composeEnhancer","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","preloadedState","createStore","combineReducers","applyMiddleware","thunk","logger","ReactDOM","render","StrictMode","getElementById"],"mappings":"wNACYA,E,yECDCC,EAAqB,qBCOrBC,EAA0B,SAACC,GACtC,MAAO,CACLC,KAAMH,EACNI,QAASF,ICQAG,EAA4B,SAACC,EAAkBC,GAAnB,OAAqC,SAC1EC,EACAC,GAEF,IAAMC,EAAcD,IAAWE,gBAAgBT,SACzCU,EAAsB,sBACvBF,EAAYG,MAAM,EAAGN,IADE,CAE1BD,GAF0B,YAGvBI,EAAYG,MAAMN,EAAQ,KAE/BC,EAASP,EAAwBW,MA2F7BE,EAAmB,SAACC,EAAiBC,EAAWC,GACpD,IAAMC,EAAIH,EAAMC,GAGhB,OAFAD,EAAMC,GAAKD,EAAME,GACjBF,EAAME,GAAKC,EACJH,G,2DCrFMI,EA5BgD,SAACC,GAC9D,IAAOC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,UAMxB,OACE,mCACE,cAAC,IAAD,CAAyBC,MAAOC,IAAhC,SACE,cAAC,IAAD,CACEC,gBAAc,EACdC,QAAQ,SACRC,OAAO,aACPC,OAAO,SACPC,MAAOV,EAAMW,SACbV,MAAOA,EACPC,SAdiB,SAACU,GACxBV,EAASU,GAAQX,IAcXY,oBAAqB,CACnB,aAAc,eAEhBV,UAAWA,S,SCHNW,EAnBgD,SAACd,GAC9D,IAAOC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,UAMxB,OACE,mCACE,cAACY,EAAA,EAAD,CACEL,MAAOV,EAAMW,SACbV,MAAOA,EACPC,SATe,SAACc,GACpBd,EAASc,EAAEC,OAAOhB,QASdE,UAAWA,O,4CCPbe,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCX,OAAQ,CACNA,OAAQW,EAAMC,QAAQ,IAExBC,YAAa,CACXC,MAAOH,EAAMC,QAAQ,IACrBG,QAAS,oBA4CEC,EAxCuD,SAACzB,GACrE,IAAOG,EAAuCH,EAAvCG,UAAWuB,EAA4B1B,EAA5B0B,WAAYC,EAAgB3B,EAAhB2B,aAExBC,EAAaD,EAAe,EAC5BE,EAAeF,EAAeD,EAAa,EAE3CI,EAAUZ,IAahB,OACE,sBAAKf,UAAWA,EAAhB,UACE,cAAC4B,EAAA,EAAD,CAAY,aAAW,SAAS5B,UAAW2B,EAAQrB,OAAQuB,QAbxC,WACrBhC,EAAMiC,sBAAsBN,IAY1B,SACE,cAAC,IAAD,MAEF,sBAAKxB,UAAW2B,EAAQR,YAAxB,UAEIM,GAAc,cAACG,EAAA,EAAD,CAAY,aAAW,UAAU5B,UAAW2B,EAAQrB,OAAQuB,QAf3D,WACrBhC,EAAMkC,sBAAsBP,IAcR,SACZ,cAACQ,EAAA,EAAD,MAIFN,GAAgB,cAACE,EAAA,EAAD,CAAY,aAAW,YAAY5B,UAAW2B,EAAQrB,OAAQuB,QAjB7D,WACvBhC,EAAMoC,wBAAwBT,IAgBR,SACd,cAACU,EAAA,EAAD,a,kBCvBGC,EAzBwD,SAACtC,GACtE,IAAOC,EAA8BD,EAA9BC,MAAOC,EAAuBF,EAAvBE,SAAUC,EAAaH,EAAbG,UAMxB,OACE,mCACE,cAACoC,EAAA,EAAD,CACEC,QACE,cAACC,EAAA,EAAD,CACEC,QAASzC,EACTC,SAVW,SAACyC,GACpBzC,EAASyC,EAAM1B,OAAOyB,UAUdE,KAAK,WACLC,MAAM,YAGVnC,MAAOV,EAAMW,SACbR,UAAWA,O,mBP3BPxB,K,cAAAA,E,gBAAAA,E,eAAAA,E,gBAAAA,E,2BAAAA,E,eAAAA,E,gBAAAA,E,eAAAA,E,gBAAAA,E,mBAAAA,E,iBAAAA,E,uBAAAA,E,yBAAAA,E,oBAAAA,M,KAiBL,IAAMmE,EAA+B,SAACC,GAC3C,OAAQA,GACN,KAAKpE,EAAYqE,UAAW,MAAO,aACnC,KAAKrE,EAAYsE,YAAa,MAAO,eACrC,KAAKtE,EAAYuE,WAAY,MAAO,cACpC,KAAKvE,EAAYwE,YAAa,MAAO,cACrC,KAAKxE,EAAYyE,uBAAwB,MAAO,2BAChD,KAAKzE,EAAY0E,WAAY,MAAO,cACpC,KAAK1E,EAAY2E,WAAY,MAAO,cACpC,KAAK3E,EAAY4E,UAAW,MAAO,aACnC,KAAK5E,EAAY6E,WAAY,MAAO,cACpC,KAAK7E,EAAY8E,aAAc,MAAO,gBACtC,KAAK9E,EAAY+E,YAAa,MAAO,eACrC,KAAK/E,EAAYgF,kBAAmB,MAAO,qBAC3C,KAAKhF,EAAYiF,oBAAqB,MAAO,uBAC7C,KAAKjF,EAAYkF,cAAe,MAAO,mB,oCQC5BC,EAvB8C,SAAC9D,GAC5D,IAAOG,EAAiDH,EAAjDG,UAAW4D,EAAsC/D,EAAtC+D,QAAS9D,EAA6BD,EAA7BC,MAAOC,EAAsBF,EAAtBE,SAAU8D,EAAYhE,EAAZgE,SAM5C,OACE,mCACE,eAACC,EAAA,EAAD,CAAaD,SAAUA,EAAvB,UACE,cAACE,EAAA,EAAD,UAAalE,EAAMW,WACnB,cAACwD,EAAA,EAAD,CACElE,MAAOA,EACPC,SAVa,SAACyC,GACpBzC,EAASyC,EAAM1B,OAAOhB,QAUhBE,UAAWA,EAHb,SAKI4D,EAAQK,KAAI,SAACC,GAAD,OAAY,cAACC,EAAA,EAAD,CAA6BrE,MAAOoE,EAAOpE,MAA3C,SAAmDoE,EAAO3D,OAA3C2D,EAAOpE,kBCdpDiB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCmD,KAAM,CACJhD,MAAOH,EAAMC,QAAQ,KAEvBmD,OAAQ,CACNjD,MAAOH,EAAMC,QAAQ,KAEvBZ,OAAQ,CACNA,OAAQW,EAAMC,QAAQ,IAExBC,YAAa,CACXC,MAAOH,EAAMC,QAAQ,IACrBG,QAAS,oBAqCEiD,EAjCiD,SAACzE,GAC/D,IAAO0E,EAA2D1E,EAA3D0E,YAAaC,EAA8C3E,EAA9C2E,qBAAsBC,EAAwB5E,EAAxB4E,qBAEpC9C,EAAUZ,IAEV2D,ETIC,CACL,CAAC5E,MAAOtB,EAAYqE,UAAWtC,MAAOoC,EAA6BnE,EAAYqE,YAC/E,CAAC/C,MAAOtB,EAAYsE,YAAavC,MAAOoC,EAA6BnE,EAAYsE,cACjF,CAAChD,MAAOtB,EAAYuE,WAAYxC,MAAOoC,EAA6BnE,EAAYuE,aAChF,CAACjD,MAAOtB,EAAYwE,YAAazC,MAAOoC,EAA6BnE,EAAYwE,cAEjF,CAAClD,MAAOtB,EAAYyE,uBAAwB1C,MAAOoC,EAA6BnE,EAAYyE,yBAC5F,CAACnD,MAAOtB,EAAY0E,WAAY3C,MAAOoC,EAA6BnE,EAAY0E,aAChF,CAACpD,MAAOtB,EAAY2E,WAAY5C,MAAOoC,EAA6BnE,EAAY2E,aAChF,CAACrD,MAAOtB,EAAY4E,UAAW7C,MAAOoC,EAA6BnE,EAAY4E,YAC/E,CAACtD,MAAOtB,EAAY6E,WAAY9C,MAAOoC,EAA6BnE,EAAY6E,aAChF,CAACvD,MAAOtB,EAAY8E,aAAc/C,MAAOoC,EAA6BnE,EAAY8E,eAClF,CAACxD,MAAOtB,EAAY+E,YAAahD,MAAOoC,EAA6BnE,EAAY+E,cACjF,CAACzD,MAAOtB,EAAYgF,kBAAmBjD,MAAOoC,EAA6BnE,EAAYgF,oBACvF,CAAC1D,MAAOtB,EAAYiF,oBAAqBlD,MAAOoC,EAA6BnE,EAAYiF,sBACzF,CAAC3D,MAAOtB,EAAYkF,cAAenD,MAAOoC,EAA6BnE,EAAYkF,iBSRrF,OACE,sBAAK1D,UAAW2B,EAAQyC,KAAxB,UACE,cAAC,EAAD,CACEtE,MAAOyE,EAAY3B,YACnBgB,QAASc,EACT3E,SAdkB,SAAC4E,GAEvBH,EAD6BG,IAczB3E,UAAW2B,EAAQ0C,OAJrB,0BAQA,cAACzC,EAAA,EAAD,CAAY,aAAW,SAAS5B,UAAW2B,EAAQrB,OAAQuB,QAdxC,WACrB4C,KAaE,SACE,cAAC,IAAD,UC7CF1D,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2D,UAAW,CACTC,UAAW5D,EAAMC,QAAQ,IACzB4D,SAAU,QAEZV,KAAM,CACJhD,MAAO,OACPd,OAAQ,YA6CGyE,EAzCmC,SAAClF,GACjD,IAAOmF,EAAuCnF,EAAvCmF,aAAcC,EAAyBpF,EAAzBoF,sBAEftD,EAAUZ,IAkBhB,OACE,qCACE,cAACmE,EAAA,EAAD,CAAQ9E,QAAQ,WAAWsC,MAAM,UAAUb,QAZb,WAChC,IAAMsD,EAAe,CC7BkC,CACzDC,OAAQ,MACRxC,YAAa,MD2BU,mBAAkCoC,IACvDC,EAAsBE,IAUpB,8BACA,cAACE,EAAA,EAAD,CAAMrF,UAAW2B,EAAQiD,UAAWU,UAAU,MAAM,aAAW,uBAA/D,SACGN,GAAgBA,EAAaf,KAAI,SAACM,EAAa9E,GAC9C,OACE,cAAC8F,EAAA,EAAD,CAAkBvF,UAAW2B,EAAQyC,KAArC,SACE,cAAC,EAAD,CACEG,YAAaA,EACbC,qBAAsB,SAACgB,GAAD,OAzBD,SAACA,EAAsBxG,GACxD,IAAMmG,EAAe,YAAOH,GAC5BG,EAAgBnG,GAAO4D,YAAc4C,EACrCP,EAAsBE,GAsByBM,CAA2BD,EAAS/F,IACvEgF,qBAAsB,kBAfP,SAACzF,GAC5B,IAAMmG,EAAe,sBAAOH,EAAa1F,MAAM,EAAGN,IAA7B,YAAwCgG,EAAa1F,MAAMN,EAAQ,KACxFiG,EAAsBE,GAakBV,CAAqBhF,OAJtCA,Y,SExBrBsB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCyE,KAAM,CACJC,SAAU,EACVC,eAAgB,UAElBtF,OAAQ,CACNA,OAAQW,EAAMC,QAAQ,IAExB2E,QAAS,CACPxE,QAAS,cA+DEyE,EA3DmC,SAACjG,GACjD,IACEd,EAOEc,EAPFd,QACAyC,EAME3B,EANF2B,aACAuE,EAKElG,EALFkG,2BACAC,EAIEnG,EAJFmG,8BACAC,EAGEpG,EAHFoG,6BACAC,EAEErG,EAFFqG,0BACAC,EACEtG,EADFsG,4BAGIxE,EAAUZ,IAsBhB,OACE,qBAAKf,UAAW2B,EAAQ+D,KAAxB,SACE,eAACU,EAAA,EAAD,CAAMxB,WAAS,EAAC1D,QAAS,EAAzB,UACE,eAACkF,EAAA,EAAD,CAAMhC,MAAI,EAACiC,GAAI,GAAf,UACE,cAAC,EAAD,CAAWrG,UAAW2B,EAAQrB,OAAQR,MAAOf,EAAQ0B,KAAMV,SAxBxC,SAACU,GAC1BsF,EAA2BvE,EAAcf,IAuBnC,6BAGA,cAAC,EAAD,CAAWT,UAAW2B,EAAQrB,OAAQR,MAAOf,EAAQuH,QAASvG,SAvBxC,SAACuG,GAC7BN,EAA8BxE,EAAc8E,IAsBtC,qBAGA,cAAC,EAAD,CAAWtG,UAAW2B,EAAQrB,OAAQR,MAAOf,EAAQwH,OAAQxG,SAtBxC,SAACwG,GAC5BN,EAA6BzE,EAAc+E,IAqBrC,oBAGA,cAAC,EAAD,CAAevG,UAAW2B,EAAQrB,OAAQR,MAAOf,EAAQyH,IAAKzG,SArB5C,SAACyG,GACzBN,EAA0B1E,EAAcgF,IAoBlC,iBAGA,cAAC,EAAD,aAAwBxG,UAAW2B,EAAQkE,SAAahG,OAE1D,cAACuG,EAAA,EAAD,CAAMhC,MAAI,EAACiC,GAAI,GAAf,SACE,cAAC,EAAD,CAAcrB,aAAcjG,EAAQ0H,MAAOxB,sBAvBvB,SAACwB,GAC3BN,EAA4B3E,EAAciF,cChDxC1F,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvC2D,UAAW,GACXR,KAAM,CACJhD,MAAO,OACPd,OAAQ,OACRoG,aAAc,sBA4BHC,EAvB2B,SAAC9G,GACzC,IAAOlB,EAAYkB,EAAZlB,SAEDgD,EAAUZ,IAEhB,OACE,cAACsE,EAAA,EAAD,CAAMrF,UAAW2B,EAAQiD,UAAWU,UAAU,MAAM,aAAW,uBAA/D,SACG3G,GAAYA,EAASsF,KAAI,SAAClF,EAASU,GAClC,OACE,cAAC8F,EAAA,EAAD,CAAkBvF,UAAW2B,EAAQyC,KAArC,SACE,cAAC,EAAD,aACErF,QAASA,EACTyC,aAAc/B,EACd8B,WAAY5C,EAASiI,QACjB/G,KALOJ,SC+BVoH,EArDkB,WAC/B,IAAOlI,EAAYmI,aAAY,SAACC,GAAD,OAA6BA,EAAM3H,mBAA3DT,SACDM,EAAW+H,cAkCjB,OACE,mCACE,cAAC,EAAD,CACErI,SAAUA,EACVmD,sBApCwB,SAAC9C,GAC7BC,EXSqC,SAACD,GAAD,OAAmB,SACxDC,EACAC,GAEF,IAAMC,EAAcD,IAAWE,gBAAgBT,SACzCU,EAAsB,sBACvBF,EAAYG,MAAM,EAAGN,IADE,YAEvBG,EAAYG,MAAMN,EAAQ,KAE/BC,EAASP,EAAwBW,KWlBtB4H,CAA0BjI,KAoC/B+G,2BAjC6B,SAAC/G,EAAe2F,GACjD1F,EXiByC,SAACD,EAAe2F,GAAhB,OAAmC,SAC5E1F,EACAC,GAEF,IAAMgI,EAAahI,IAAWE,gBAAgBT,SAASK,GACvD,GAAKkI,EAAL,CAGA,IAAMC,EAAmB,2BACpBD,GADoB,IAEvBzG,KAAMkE,IAER1F,EAASH,EAA0BqI,EAAYnI,MW7BpCoI,CAA8BpI,EAAO2F,KAiC1CsB,6BA1B+B,SAACjH,EAAe2F,GACnD1F,EXuC2C,SAACD,EAAe2F,GAAhB,OAAqC,SAChF1F,EACAC,GAEF,IAAMgI,EAAahI,IAAWE,gBAAgBT,SAASK,GACvD,GAAKkI,EAAL,CAGA,IAAMC,EAAmB,2BACpBD,GADoB,IAEvBX,OAAQ5B,IAEV1F,EAASH,EAA0BqI,EAAYnI,MWnDpCqI,CAAgCrI,EAAO2F,KA0B5CqB,8BA/BgC,SAAChH,EAAe2F,GACpD1F,EX4B4C,SAACD,EAAe2F,GAAhB,OAAqC,SACjF1F,EACAC,GAEF,IAAMgI,EAAahI,IAAWE,gBAAgBT,SAASK,GACvD,GAAKkI,EAAL,CAGA,IAAMC,EAAmB,2BACpBD,GADoB,IAEvBZ,SAAU3B,GAAYuC,EAAWZ,UAEnCrH,EAASH,EAA0BqI,EAAYnI,MWxCpCsI,CAAiCtI,EAAO2F,KA+B7C5C,sBAhBwB,SAAC/C,GAC7BC,EXgF0C,SAACD,GAAD,OAAmB,SAC7DC,EACAC,GAEF,IAAMG,EAAsB,YAAOH,IAAWE,gBAAgBT,UAC1DK,GAAS,GAAKA,GAASK,EAAYuH,SAGvCrH,EAAiBF,EAAaL,EAAOA,EAAQ,GAC7CC,EAASP,EAAwBW,MWzFtBkI,CAA+BvI,KAgBpCiD,wBAb0B,SAACjD,GAC/BC,EXwF4C,SAACD,GAAD,OAAmB,SAC/DC,EACAC,GAEF,IAAMG,EAAsB,YAAOH,IAAWE,gBAAgBT,UAC1DK,EAAQ,GAAKA,GAASK,EAAYuH,OAAS,IAG/CrH,EAAiBF,EAAaL,EAAOA,EAAQ,GAC7CC,EAASP,EAAwBW,MWjGtBmI,CAAiCxI,KAatCkH,0BA1B4B,SAAClH,EAAe2F,GAChD1F,EXkDwC,SAACD,EAAe2F,GAAhB,OAAsC,SAC9E1F,EACAC,GAEF,IAAMgI,EAAahI,IAAWE,gBAAgBT,SAASK,GACvD,GAAKkI,EAAL,CAGA,IAAMC,EAAmB,2BACpBD,GADoB,IAEvBV,IAAK7B,IAEP1F,EAASH,EAA0BqI,EAAYnI,MW9DpCyI,CAA6BzI,EAAO2F,KA0BzCwB,4BAvB8B,SAACnH,EAAe2F,GAClD1F,EX6D0C,SAACD,EAAe2F,GAAhB,OAA4C,SACtF1F,EACAC,GAEF,IAAMgI,EAAahI,IAAWE,gBAAgBT,SAASK,GACvD,GAAKkI,EAAL,CAGA,IAAMC,EAAmB,2BACpBD,GADoB,IAEvBT,MAAO9B,IAET1F,EAASH,EAA0BqI,EAAYnI,MWzEpC0I,CAA+B1I,EAAO2F,UC/BpCgD,EAR6B,WAC1C,OACE,mCACE,cAAC,EAAD,OCOSC,EAN+B,SAAC/H,GAC7C,IAAOgI,EAAyBhI,EAAzBgI,sBAEP,OAAS,cAAC3C,EAAA,EAAD,CAAQ9E,QAAQ,WAAWsC,MAAM,UAAUb,QAASgG,EAApD,0BCOIC,GAZ0B,WACvC,IAAM7I,EAAW+H,cAMjB,OACE,cAAC,EAAD,CAAea,sBALa,WAC5B5I,GdFoC,SACpCA,EACAC,GAEF,IAAMG,EAAsB,CeAqB,CACjDoB,KAAM,IAAIsH,KACVzB,QAAS,EACTC,OAAQ,GACRC,KAAK,EACLpB,OAAQ,IACRqB,MAAO,KfNqB,mBAEvBvH,IAAWE,gBAAgBT,WAEhCM,EAASP,EAAwBW,WgBUtB2I,GAAsB,SAACC,GAClC,IAAMC,EAAQD,EAAKE,MAAM,KACzB,GAAID,EAAMtB,QAAU,EAClB,OAAO,KAET,IAAMwB,EAAcF,EAAM,GAAGC,MAAM,KACnC,OAAIC,EAAYxB,OAAS,EAChB,KAEF,CACLnG,KAAM,IAAIsH,KAAKM,SAASD,EAAY,IAAKC,SAASD,EAAY,IAAM,EAAGC,SAASD,EAAY,KAC5F9B,QAAS+B,SAASD,EAAY,IAC9B7B,OAAQ6B,EAAY,GACpB5B,IAAwB,MAAnB4B,EAAY,GACjBhD,OAAQ,MACRqB,MAAO6B,GAA2BF,EAAYG,QAAO,SAACC,EAAG/I,GAAJ,OAAUA,EAAI,QAI1D6I,GAA6B,SAAC9I,GACzC,IAAKA,EAAMoH,OACT,MAAO,GAGT,GAAW,EADEyB,SAAS7I,EAAM,IACb,IAAMA,EAAMoH,OACzB,MAAO,GAIT,IAFA,IAAM6B,EAAajJ,EAAMF,MAAM,GACzBmH,EAAuB,GACpBzH,EAAQ,EAAGA,EAAQyJ,EAAW7B,QACrCH,EAAMiC,KAAN,2BRlDuD,CACzDtD,OAAQ,MACRxC,YAAa,MQgDX,IAEEA,YAAa6F,EAAWzJ,MAE1BA,GAAS,EAEX,OAAOyH,GAYHkC,GAAsB,WAC1B,MAAO,0CAGIC,GAAwB,SAACjK,GAA4D,IAAvCkK,EAAsC,uDAAd,EACjF,OAAOlK,EAASsF,KAAI,SAAC6E,EAAGrJ,GAAJ,OAAUsJ,GAAgBD,EAAGrJ,EAAIoJ,MAAgBG,KAAK,OAG/DD,GAAkB,SAAChK,EAAkBC,GAChD,OAAYA,EAAQ,sCAClBD,EAAQ0B,KAAKwI,UAAY,KAAOlK,EAAQ0B,KAAKyI,WAAa,GAAK,IAAMnK,EAAQ0B,KAAK0I,cAClF,MAAQpK,EAAQuH,QAAU,KAAOvH,EAAQyH,IAAM,IAAM,KAAO,IAAMzH,EAAQwH,OAAS,QACnF6C,GAAqBrK,EAAQ0H,QAGpB2C,GAAuB,SAAC3C,GACnC,OAAYA,EAAMG,OAAS,IAAMH,EAAMxC,KAAI,SAACG,GAAD,OAAeA,EAAKxB,YAAc,IAAMwB,EAAKgB,OAAS,UAAQ4D,KAAK,MAG1GK,GAAmB,SAACC,EAAkBC,GAC1C,IAAMC,EAAUC,SAASC,cAAc,KACvCF,EAAQG,aAAa,OAAQ,iCAAmCC,mBAAmBL,IACnFC,EAAQG,aAAa,WAAYL,GAEjCE,EAAQK,MAAMxI,QAAU,OACxBoI,SAASK,KAAKC,YAAYP,GAE1BA,EAAQQ,QAERP,SAASK,KAAKG,YAAYT,IC3FbU,GALyC,SAACrK,GACvD,IAAOsK,EAAkBtK,EAAlBsK,eACP,OAAQ,cAACjF,EAAA,EAAD,CAAQ9E,QAAQ,WAAWsC,MAAM,UAAUb,QAASsI,EAApD,oCCWKC,GAdsB,WACnC,IAAMnL,EAAW+H,cAMjB,OACE,mCACE,cAAC,GAAD,CAAiBmD,eANG,WACtBlL,GFuDiC,SACjCA,EACAC,GAEF,IAAMP,EAAWO,IAAWE,gBAAgBT,SACtC0L,EAAc1B,KAAwBC,GAAsBjK,EAAU,GAC5E0K,GAAiB,cAAegB,Y,6BG7BnBC,GAlCkC,SAACzK,GAChD,IAAO0K,EAAqB1K,EAArB0K,kBACDC,EAAUC,iBAAO,MAwBvB,OACE,qCACE,uBAAOC,IAAKF,EAAS5L,KAAK,OAAO+L,QAAM,EAAC5K,SApB1B,SAACc,GAEjB,GADAA,EAAE+J,iBACG/J,EAAEC,QAAWD,EAAEC,OAAO+J,OAAUhK,EAAEC,OAAO+J,MAAMjE,OAApD,CAIA,IAAMkE,EAAS,IAAIC,WACnBD,EAAOE,OAAP,yCAAgB,WAAOnK,GAAP,kBAAAoK,EAAA,uDACR1B,EAAO1I,EAAEC,SAAF,UAAYD,EAAEC,OAAOoK,cAArB,aAAY,EAAiBC,aAExCZ,EAAkBhB,GAElB6B,MAAM,mCALM,2CAAhB,sDAQAN,EAAOO,WAAWxK,EAAEC,OAAO+J,MAAM,QAM/B,cAAC3F,EAAA,EAAD,CAAQ9E,QAAQ,WAAWsC,MAAM,UAAUb,QAzB7B,WAChB2I,EAAQc,SAAad,EAAQc,QAAyCtB,SAwBpE,qCCjBSuB,GAdoB,WACjC,IAAMtM,EAAW+H,cAMjB,OACE,mCACE,cAAC,GAAD,CAAeuD,kBANO,SAACiB,GACzBvM,EJDqC,SAACuM,GAAD,OAA4B,SACjEvM,EACAC,GAEF,IAAMuM,EAAQD,EAAerD,MAAM,MAAMlE,KAAI,SAACgE,GAAD,OAAUA,EAAKyD,WAAW,KAAM,OAE7EC,QAAQC,IAAIH,GAIZ,IAFA,IAAIzM,EAAQ,EACNL,EAAsB,GACrBK,EAAQyM,EAAM7E,OAAQ5H,IAAS,CACpC,IAAMD,EAAUiJ,GAAoByD,EAAMzM,IAC1CD,GAAWJ,EAAS+J,KAAK3J,GAE3BE,EAASP,EAAwBC,KIbtBkN,CAA0BL,UCMxBM,GAVqB,WAClC,OACE,qCACE,cAAC,GAAD,IACA,cAAC,GAAD,IACA,cAAC,GAAD,QCOSC,OATf,WACE,OACE,sBAAK/L,UAAU,MAAf,UACE,cAAC,GAAD,IACA,cAAC,EAAD,Q,sCCJOgM,GAAoD,CAC/DrN,SAAU,IAmBGsN,GAhBS,WAGI,IAFxBC,EAEuB,uDAFfF,GACRG,EACuB,uCACzB,OAAQA,EAAOvN,MACb,KAAKH,EACH,OAAO,2BACFyN,GADL,IAEEvN,SAAUwN,EAAOtN,UAErB,QACE,OAAO,eACFqN,KCnBLE,GAAmBC,QAAWA,OAAeC,sCAAyCC,KCErF,IDKiCC,GCL3BzF,GDMJ0F,aENgDC,aAAkC,CACzFtN,gBAAiB6M,KFObO,GACAJ,GAAgBO,aAAgBC,KAAOC,QCP7CC,IAASC,OACL,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUjG,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJ0C,SAASwD,eAAe,W","file":"static/js/main.09773f6b.chunk.js","sourcesContent":["/* eslint-disable no-unused-vars */\nexport enum ServiceType {\n    engineOil = '1',\n    frontBreaks = '2',\n    brakeFluid = '3',\n    microFilter = '4',\n    recirculatingAirFilter = '5',\n    rearBreaks = '6',\n    sparkPlugs = '10',\n    airFilter = '11',\n    fuelFilter = '12',\n    vehicleCheck = '100',\n    preDelivery = '20',\n    serviceInspection = '21',\n    statutoryInspection = '32',\n    emissionsTest = '33'\n};\n\nexport const getDisplayNameForServiceType = (serviceType: ServiceType): string => {\n  switch (serviceType) {\n    case ServiceType.engineOil: return 'Engine oil';\n    case ServiceType.frontBreaks: return 'Front breaks';\n    case ServiceType.brakeFluid: return 'Brake fluid';\n    case ServiceType.microFilter: return 'Microfilter';\n    case ServiceType.recirculatingAirFilter: return 'Recirculating air filter';\n    case ServiceType.rearBreaks: return 'Rear breaks';\n    case ServiceType.sparkPlugs: return 'Spark plugs';\n    case ServiceType.airFilter: return 'Air filter';\n    case ServiceType.fuelFilter: return 'Fuel filter';\n    case ServiceType.vehicleCheck: return 'Vehicle check';\n    case ServiceType.preDelivery: return 'Pre-delivery';\n    case ServiceType.serviceInspection: return 'Service inspection';\n    case ServiceType.statutoryInspection: return 'Statutory inspection';\n    case ServiceType.emissionsTest: return 'Emissions test';\n  }\n};\n\nexport const getServiceTypePickerOptions = (): {value: ServiceType, label: string}[] => {\n  return [\n    {value: ServiceType.engineOil, label: getDisplayNameForServiceType(ServiceType.engineOil)},\n    {value: ServiceType.frontBreaks, label: getDisplayNameForServiceType(ServiceType.frontBreaks)},\n    {value: ServiceType.brakeFluid, label: getDisplayNameForServiceType(ServiceType.brakeFluid)},\n    {value: ServiceType.microFilter, label: getDisplayNameForServiceType(ServiceType.microFilter)},\n    // eslint-disable-next-line max-len\n    {value: ServiceType.recirculatingAirFilter, label: getDisplayNameForServiceType(ServiceType.recirculatingAirFilter)},\n    {value: ServiceType.rearBreaks, label: getDisplayNameForServiceType(ServiceType.rearBreaks)},\n    {value: ServiceType.sparkPlugs, label: getDisplayNameForServiceType(ServiceType.sparkPlugs)},\n    {value: ServiceType.airFilter, label: getDisplayNameForServiceType(ServiceType.airFilter)},\n    {value: ServiceType.fuelFilter, label: getDisplayNameForServiceType(ServiceType.fuelFilter)},\n    {value: ServiceType.vehicleCheck, label: getDisplayNameForServiceType(ServiceType.vehicleCheck)},\n    {value: ServiceType.preDelivery, label: getDisplayNameForServiceType(ServiceType.preDelivery)},\n    {value: ServiceType.serviceInspection, label: getDisplayNameForServiceType(ServiceType.serviceInspection)},\n    {value: ServiceType.statutoryInspection, label: getDisplayNameForServiceType(ServiceType.statutoryInspection)},\n    {value: ServiceType.emissionsTest, label: getDisplayNameForServiceType(ServiceType.emissionsTest)},\n  ];\n};\n","export const SERVICES_AVAILABLE = 'SERVICES_AVAILABLE';\n","import Service from '../../model/Service';\nimport {SERVICES_AVAILABLE} from './ServiceActionTypes';\n\nexport interface ServicesAvailable {\n    type: typeof SERVICES_AVAILABLE;\n    payload: Service[];\n}\nexport const ServicesAvailableAction = (services: Service[]): ServicesAvailable => {\n  return {\n    type: SERVICES_AVAILABLE,\n    payload: services,\n  };\n};\n\nexport type DispatchedServicesAction =\n    | ServicesAvailable;\n","import {AnyAction} from 'redux';\nimport {ThunkDispatch} from 'redux-thunk';\nimport Service, {createServiceObject} from '../../model/Service';\nimport ServiceItem from '../../model/ServiceItem';\nimport {ServicesAvailableAction} from '../actions/ServiceAction';\nimport {ApplicationStore} from '../reducers';\n\nexport const createServiceThunk = () => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const newServices: Service[] = [\n    createServiceObject(),\n    ...getState().servicesReducer.services,\n  ];\n  dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const updateServiceAtIndexThunk = (service: Service, index: number) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const oldServices = getState().servicesReducer.services;\n  const newServices: Service[] = [\n    ...oldServices.slice(0, index),\n    service,\n    ...oldServices.slice(index + 1),\n  ];\n  dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const deleteServiceAtIndexThunk = (index: number) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const oldServices = getState().servicesReducer.services;\n  const newServices: Service[] = [\n    ...oldServices.slice(0, index),\n    ...oldServices.slice(index + 1),\n  ];\n  dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const updateServiceDateAtIndexThunk = (index: number, newValue: Date) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const oldService = getState().servicesReducer.services[index];\n  if (!oldService) {\n    return;\n  }\n  const newService: Service = {\n    ...oldService,\n    date: newValue,\n  };\n  dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceMileageAtIndexThunk = (index: number, newValue: string) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const oldService = getState().servicesReducer.services[index];\n  if (!oldService) {\n    return;\n  }\n  const newService: Service = {\n    ...oldService,\n    mileage: +newValue || oldService.mileage,\n  };\n  dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceDealerAtIndexThunk = (index: number, newValue: string) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const oldService = getState().servicesReducer.services[index];\n  if (!oldService) {\n    return;\n  }\n  const newService: Service = {\n    ...oldService,\n    dealer: newValue,\n  };\n  dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceBMWAtIndexThunk = (index: number, newValue: boolean) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const oldService = getState().servicesReducer.services[index];\n  if (!oldService) {\n    return;\n  }\n  const newService: Service = {\n    ...oldService,\n    bmw: newValue,\n  };\n  dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\nexport const updateServiceItemsAtIndexThunk = (index: number, newValue: ServiceItem[]) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const oldService = getState().servicesReducer.services[index];\n  if (!oldService) {\n    return;\n  }\n  const newService: Service = {\n    ...oldService,\n    items: newValue,\n  };\n  dispatch(updateServiceAtIndexThunk(newService, index));\n};\n\n// Swap\nconst swapArrayItemsAt = (array: Object[], i: number, j: number) => {\n  const b = array[i];\n  array[i] = array[j];\n  array[j] = b;\n  return array;\n};\n\nexport const moveServiceUpwardsAtIndexThunk = (index: number) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const newServices: Service[] = [...getState().servicesReducer.services];\n  if (index <= 0 || index >= newServices.length ) {\n    return;\n  }\n  swapArrayItemsAt(newServices, index, index - 1);\n  dispatch(ServicesAvailableAction(newServices));\n};\n\nexport const moveServiceDownwardsAtIndexThunk = (index: number) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const newServices: Service[] = [...getState().servicesReducer.services];\n  if (index < 0 || index >= newServices.length - 1) {\n    return;\n  }\n  swapArrayItemsAt(newServices, index, index + 1);\n  dispatch(ServicesAvailableAction(newServices));\n};\n","import React, {PropsWithChildren} from 'react';\nimport DateFnsUtils from '@date-io/date-fns';\nimport {MuiPickersUtilsProvider, KeyboardDatePicker} from '@material-ui/pickers';\n\nexport interface DateInputProps {\n    value: Date,\n    onChange: (value: Date) => void,\n    className?: string,\n}\n\nconst DateInput: React.FC<PropsWithChildren<DateInputProps>> = (props) => {\n  const {value, onChange, className} = props;\n\n  const handleDateChange = (date: Date | null) => {\n    onChange(date || value);\n  };\n\n  return (\n    <>\n      <MuiPickersUtilsProvider utils={DateFnsUtils}>\n        <KeyboardDatePicker\n          disableToolbar\n          variant=\"inline\"\n          format=\"dd.MM.yyyy\"\n          margin=\"normal\"\n          label={props.children}\n          value={value}\n          onChange={handleDateChange}\n          KeyboardButtonProps={{\n            'aria-label': 'change date',\n          }}\n          className={className}\n        />\n      </MuiPickersUtilsProvider>\n    </>\n  );\n}\n\nexport default DateInput;\n","import React, {ChangeEvent, PropsWithChildren} from 'react';\nimport TextField from '@material-ui/core/TextField';\n\nexport interface TextInputProps {\n    value: any,\n    onChange: (value: string) => void,\n    className?: string,\n}\n\nconst TextInput: React.FC<PropsWithChildren<TextInputProps>> = (props) => {\n  const {value, onChange, className} = props;\n\n  const fieldChanged = (e: ChangeEvent<HTMLInputElement>) => {\n    onChange(e.target.value);\n  };\n\n  return (\n    <>\n      <TextField\n        label={props.children}\n        value={value}\n        onChange={fieldChanged}\n        className={className}\n      />\n    </>\n  );\n}\n\nexport default TextInput;\n","import {IconButton} from '@material-ui/core';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {makeStyles} from '@material-ui/core/styles';\nimport {ArrowDownward, ArrowUpward} from '@material-ui/icons';\n\nexport interface ServiceListItemActionsProps {\n    className?: string,\n    totalCount: number,\n    currentIndex: number,\n    onServiceDeleteAction: (index: number) => void,\n    onServiceMoveUpAction: (index: number) => void,\n    onServiceMoveDownAction: (index: number) => void,\n}\n\n\nconst useStyles = makeStyles((theme) => ({\n  margin: {\n    margin: theme.spacing(1),\n  },\n  moveActions: {\n    width: theme.spacing(16),\n    display: 'inline-block',\n  },\n}));\n\nconst ServiceListItemActions: React.FC<ServiceListItemActionsProps> = (props) => {\n  const {className, totalCount, currentIndex} = props;\n\n  const hasArrowUp = currentIndex > 0;\n  const hasArrowDown = currentIndex < totalCount - 1;\n\n  const classes = useStyles();\n\n  const onDeleteAction = () => {\n    props.onServiceDeleteAction(currentIndex);\n  };\n  const onMoveUpAction = () => {\n    props.onServiceMoveUpAction(currentIndex);\n  };\n  const onMoveDownAction = () => {\n    props.onServiceMoveDownAction(currentIndex);\n  };\n\n\n  return (\n    <div className={className}>\n      <IconButton aria-label=\"delete\" className={classes.margin} onClick={onDeleteAction}>\n        <DeleteIcon />\n      </IconButton>\n      <div className={classes.moveActions}>\n        {\n          hasArrowUp && <IconButton aria-label=\"move_up\" className={classes.margin} onClick={onMoveUpAction}>\n            <ArrowUpward />\n          </IconButton>\n        }\n        {\n          hasArrowDown && <IconButton aria-label=\"move_down\" className={classes.margin} onClick={onMoveDownAction}>\n            <ArrowDownward />\n          </IconButton>\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default ServiceListItemActions;\n","import {Checkbox, FormControlLabel} from '@material-ui/core';\nimport {PropsWithChildren} from 'react';\n\nexport interface CheckboxInputProps {\n    value: boolean,\n    onChange: (newValue: boolean) => void,\n    className?: string,\n};\n\nconst CheckboxInput: React.FC<PropsWithChildren<CheckboxInputProps>> = (props) => {\n  const {value, onChange, className} = props;\n\n  const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    onChange(event.target.checked);\n  };\n\n  return (\n    <>\n      <FormControlLabel\n        control={\n          <Checkbox\n            checked={value}\n            onChange={handleChange}\n            name=\"checkedB\"\n            color=\"primary\"\n          />\n        }\n        label={props.children}\n        className={className}\n      />\n    </>\n  );\n};\n\nexport default CheckboxInput;\n","import {FormControl, InputLabel, MenuItem, Select} from '@material-ui/core';\nimport React, {PropsWithChildren, FC} from 'react';\n\nexport interface PickerInputProps {\n    className?: string;\n    required?: boolean;\n    value: string;\n    options: {value: string, label: string}[];\n    onChange: (newValue: string) => void;\n}\n\nconst PickerInput: FC<PropsWithChildren<PickerInputProps>> = (props) => {\n  const {className, options, value, onChange, required} = props;\n\n  const handleChange = (event: React.ChangeEvent<{ value: unknown }>) => {\n    onChange(event.target.value as string);\n  };\n\n  return (\n    <>\n      <FormControl required={required}>\n        <InputLabel>{props.children}</InputLabel>\n        <Select\n          value={value}\n          onChange={handleChange}\n          className={className}\n        >\n          { options.map((option) => <MenuItem key={option.value} value={option.value}>{option.label}</MenuItem>) }\n        </Select>\n      </FormControl>\n    </>\n  );\n}\n\nexport default PickerInput;\n","import {IconButton} from '@material-ui/core';\nimport ServiceItem from '../../../model/ServiceItem';\nimport {getServiceTypePickerOptions, ServiceType} from '../../../model/ServiceType';\nimport PickerInput from '../../shared/PickerInput';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport {makeStyles} from '@material-ui/core/styles';\n\nexport interface ServiceItemListItemProps {\n    serviceItem: ServiceItem;\n    onServiceTypeChanged: (ServiceType: ServiceType) => void;\n    onServiceItemDeleted: () => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  item: {\n    width: theme.spacing(32),\n  },\n  picker: {\n    width: theme.spacing(24),\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  moveActions: {\n    width: theme.spacing(16),\n    display: 'inline-block',\n  },\n}));\n\nconst ServiceItemListItem: React.FC<ServiceItemListItemProps> = (props) => {\n  const {serviceItem, onServiceTypeChanged, onServiceItemDeleted} = props;\n\n  const classes = useStyles();\n\n  const pickerOptions = getServiceTypePickerOptions();\n\n  const onPickerChanged = (newValue: string) => {\n    const newType: ServiceType = newValue as ServiceType;\n    onServiceTypeChanged(newType);\n  };\n\n  const onDeleteAction = () => {\n    onServiceItemDeleted();\n  };\n\n  return (\n    <div className={classes.item}>\n      <PickerInput\n        value={serviceItem.serviceType}\n        options={pickerOptions}\n        onChange={onPickerChanged}\n        className={classes.picker}\n      >\n                Service type\n      </PickerInput>\n      <IconButton aria-label=\"delete\" className={classes.margin} onClick={onDeleteAction}>\n        <DeleteIcon />\n      </IconButton>\n    </div>\n  );\n}\n\nexport default ServiceItemListItem;\n","import {Button, List, ListItem} from '@material-ui/core';\nimport ServiceItem, {createServiceItemObject} from '../../../model/ServiceItem';\nimport {makeStyles} from '@material-ui/core/styles';\nimport ServiceItemListItem from './ServiceItemListItem';\nimport {ServiceType} from '../../../model/ServiceType';\n\nexport interface ServiceItemsProps {\n    serviceItems: ServiceItem[];\n    onServiceItemsChanged: (items: ServiceItem[]) => void;\n}\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    maxHeight: theme.spacing(30),\n    overflow: 'auto',\n  },\n  item: {\n    width: '100%',\n    margin: 'auto',\n  },\n}));\n\nconst ServiceItems: React.FC<ServiceItemsProps> = (props) => {\n  const {serviceItems, onServiceItemsChanged} = props;\n\n  const classes = useStyles();\n\n  const onTypeChangedAtIndexAction = (newType: ServiceType, index: number) => {\n    const newServiceItems = [...serviceItems];\n    newServiceItems[index].serviceType = newType;\n    onServiceItemsChanged(newServiceItems);\n  };\n\n  const onServiceItemCreateAction = () => {\n    const newServiceItems = [createServiceItemObject(), ...serviceItems];\n    onServiceItemsChanged(newServiceItems);\n  };\n\n  const onServiceItemDeleted = (index: number) => {\n    const newServiceItems = [...serviceItems.slice(0, index), ...serviceItems.slice(index + 1)];\n    onServiceItemsChanged(newServiceItems);\n  };\n\n  return (\n    <>\n      <Button variant=\"outlined\" color=\"primary\" onClick={onServiceItemCreateAction}>Add Service Item</Button>\n      <List className={classes.container} component=\"nav\" aria-label=\"main mailbox folders\">\n        {serviceItems && serviceItems.map((serviceItem, i) => {\n          return (\n            <ListItem key={i} className={classes.item}>\n              <ServiceItemListItem\n                serviceItem={serviceItem}\n                onServiceTypeChanged={(newType) => onTypeChangedAtIndexAction(newType, i)}\n                onServiceItemDeleted={() => onServiceItemDeleted(i)}\n              />\n            </ListItem>\n          )\n        })}\n      </List>\n    </>\n  );\n}\n\nexport default ServiceItems;\n","export default interface ServiceItem {\n    status: string;\n    serviceType: string;\n}\n\nexport const createServiceItemObject = (): ServiceItem => ({\n  status: '0x1',\n  serviceType: '1',\n});\n","import {FC} from 'react';\nimport {makeStyles} from '@material-ui/core/styles';\nimport Service from '../../../model/Service';\nimport DateInput from '../../shared/DateInput';\nimport TextInput from '../../shared/TextInput';\nimport ServiceListItemActions from './ServiceListItemActions';\nimport CheckboxInput from '../../shared/CheckboxInput';\nimport ServiceItem from '../../../model/ServiceItem';\nimport ServiceItems from '../serviceItems/ServiceItems';\nimport {Grid} from '@material-ui/core';\n\nexport interface ServiceListItemProps {\n    currentIndex: number,\n    totalCount: number,\n    service: Service,\n    onServiceDeleteAction: (index: number) => void,\n    onServiceDateUpdatedAction: (index: number, newValue: Date) => void,\n    onServiceMileageUpdatedAction: (index: number, newValue: string) => void,\n    onServiceDealerUpdatedAction: (index: number, newValue: string) => void,\n    onServiceBMWUpdatedAction: (index: number, newValue: boolean) => void,\n    onServiceItemsUpdatedAction: (index: number, newValue: ServiceItem[]) => void,\n    onServiceMoveUpAction: (index: number) => void,\n    onServiceMoveDownAction: (index: number) => void,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    flexGrow: 1,\n    justifyContent: 'center',\n  },\n  margin: {\n    margin: theme.spacing(1),\n  },\n  actions: {\n    display: 'inline',\n  },\n}));\n\nconst ServiceListItem: FC<ServiceListItemProps> = (props: ServiceListItemProps) => {\n  const {\n    service,\n    currentIndex,\n    onServiceDateUpdatedAction,\n    onServiceMileageUpdatedAction,\n    onServiceDealerUpdatedAction,\n    onServiceBMWUpdatedAction,\n    onServiceItemsUpdatedAction,\n  } = props;\n\n  const classes = useStyles();\n\n  const onDateUpdateAction = (date: Date) => {\n    onServiceDateUpdatedAction(currentIndex, date);\n  };\n\n  const onMileageUpdateAction = (mileage: string) => {\n    onServiceMileageUpdatedAction(currentIndex, mileage);\n  };\n\n  const onDealerUpdateAction = (dealer: string) => {\n    onServiceDealerUpdatedAction(currentIndex, dealer);\n  };\n\n  const onBMWUpdateAction = (bmw: boolean) => {\n    onServiceBMWUpdatedAction(currentIndex, bmw);\n  };\n\n  const onItemsUpdateAction = (items: ServiceItem[]) => {\n    onServiceItemsUpdatedAction(currentIndex, items);\n  };\n\n  return (\n    <div className={classes.root}>\n      <Grid container spacing={3}>\n        <Grid item xs={12}>\n          <DateInput className={classes.margin} value={service.date} onChange={onDateUpdateAction}>\n            Date of service\n          </DateInput>\n          <TextInput className={classes.margin} value={service.mileage} onChange={onMileageUpdateAction}>\n            Mileage\n          </TextInput>\n          <TextInput className={classes.margin} value={service.dealer} onChange={onDealerUpdateAction}>\n            Dealer\n          </TextInput>\n          <CheckboxInput className={classes.margin} value={service.bmw} onChange={onBMWUpdateAction}>\n            BMW\n          </CheckboxInput>\n          <ServiceListItemActions className={classes.actions} {...props} />\n        </Grid>\n        <Grid item xs={12}>\n          <ServiceItems serviceItems={service.items} onServiceItemsChanged={onItemsUpdateAction} />\n        </Grid>\n      </Grid>\n    </div>\n  );\n};\n\nexport default ServiceListItem;\n","import {FC} from 'react';\nimport Service from '../../../model/Service';\nimport List from '@material-ui/core/List';\nimport ListItem from '@material-ui/core/ListItem';\nimport ServiceListItem from './ServiceListItem';\nimport {makeStyles} from '@material-ui/core/styles';\nimport ServiceItem from '../../../model/ServiceItem';\n\nexport interface ServiceListProps {\n    services: Service[],\n    onServiceDeleteAction: (index: number) => void,\n    onServiceDateUpdatedAction: (index: number, newValue: Date) => void,\n    onServiceMileageUpdatedAction: (index: number, newValue: string) => void,\n    onServiceDealerUpdatedAction: (index: number, newValue: string) => void,\n    onServiceBMWUpdatedAction: (index: number, newValue: boolean) => void,\n    onServiceItemsUpdatedAction: (index: number, newValue: ServiceItem[]) => void,\n    onServiceMoveUpAction: (index: number) => void,\n    onServiceMoveDownAction: (index: number) => void,\n};\n\nconst useStyles = makeStyles((theme) => ({\n  container: {},\n  item: {\n    width: '100%',\n    margin: 'auto',\n    borderBottom: '1px solid #ddd',\n  },\n}));\n\n\nconst ServiceList: FC<ServiceListProps> = (props: ServiceListProps) => {\n  const {services} = props;\n\n  const classes = useStyles();\n\n  return (\n    <List className={classes.container} component=\"nav\" aria-label=\"main mailbox folders\">\n      {services && services.map((service, i) => {\n        return (\n          <ListItem key={i} className={classes.item}>\n            <ServiceListItem\n              service={service}\n              currentIndex={i}\n              totalCount={services.length}\n              {...props}\n            />\n          </ListItem>\n        )\n      })}\n    </List>\n  )\n}\n\nexport default ServiceList;\n","import {FC} from 'react';\nimport {useSelector, useDispatch} from 'react-redux';\nimport ServiceItem from '../../../model/ServiceItem';\nimport {ApplicationStore} from '../../../redux/reducers';\nimport {\n  deleteServiceAtIndexThunk,\n  moveServiceDownwardsAtIndexThunk,\n  moveServiceUpwardsAtIndexThunk,\n  updateServiceBMWAtIndexThunk,\n  updateServiceDateAtIndexThunk,\n  updateServiceDealerAtIndexThunk,\n  updateServiceItemsAtIndexThunk,\n  updateServiceMileageAtIndexThunk,\n} from '../../../redux/thunks/ServiceThunk';\nimport ServiceList from './ServiceList';\n\n\nconst ServiceListContainer: FC = () => {\n  const {services} = useSelector((store: ApplicationStore) => store.servicesReducer);\n  const dispatch = useDispatch();\n\n  const onServiceDeleteAction = (index: number) => {\n    dispatch(deleteServiceAtIndexThunk(index));\n  };\n\n  const onServiceDateUpdatedAction = (index: number, newValue: Date) => {\n    dispatch(updateServiceDateAtIndexThunk(index, newValue));\n  };\n\n  const onServiceMileageUpdatedAction = (index: number, newValue: string) => {\n    dispatch(updateServiceMileageAtIndexThunk(index, newValue));\n  };\n\n  const onServiceDealerUpdatedAction = (index: number, newValue: string) => {\n    dispatch(updateServiceDealerAtIndexThunk(index, newValue));\n  };\n\n  const onServiceBMWUpdatedAction = (index: number, newValue: boolean) => {\n    dispatch(updateServiceBMWAtIndexThunk(index, newValue));\n  };\n\n  const onServiceItemsUpdatedAction = (index: number, newValue: ServiceItem[]) => {\n    dispatch(updateServiceItemsAtIndexThunk(index, newValue));\n  };\n\n  const onServiceMoveUpAction = (index: number) => {\n    dispatch(moveServiceUpwardsAtIndexThunk(index));\n  };\n\n  const onServiceMoveDownAction = (index: number) => {\n    dispatch(moveServiceDownwardsAtIndexThunk(index));\n  };\n\n  return (\n    <>\n      <ServiceList\n        services={services}\n        onServiceDeleteAction={onServiceDeleteAction}\n        onServiceDateUpdatedAction={onServiceDateUpdatedAction}\n        onServiceDealerUpdatedAction={onServiceDealerUpdatedAction}\n        onServiceMileageUpdatedAction={onServiceMileageUpdatedAction}\n        onServiceMoveUpAction={onServiceMoveUpAction}\n        onServiceMoveDownAction={onServiceMoveDownAction}\n        onServiceBMWUpdatedAction={onServiceBMWUpdatedAction}\n        onServiceItemsUpdatedAction={onServiceItemsUpdatedAction}\n      />\n    </>\n  );\n}\n\nexport default ServiceListContainer;\n","import {FunctionComponent} from 'react';\nimport ServiceListContainer from './list/ServiceListContainer';\n\nconst ServiceContainer: FunctionComponent = () => {\n  return (\n    <>\n      <ServiceListContainer />\n    </>\n  );\n}\n\nexport default ServiceContainer;\n","import {Button} from '@material-ui/core';\nimport {FC} from 'react';\n\nexport interface CreateServiceProps {\n    onServiceCreateAction: () => void;\n}\n\nconst CreateService: FC<CreateServiceProps> = (props) => {\n  const {onServiceCreateAction} = props;\n\n  return ( <Button variant=\"outlined\" color=\"primary\" onClick={onServiceCreateAction}>Add Service</Button> );\n};\n\nexport default CreateService;\n","import {useDispatch} from 'react-redux';\nimport {createServiceThunk} from '../../../redux/thunks/ServiceThunk';\nimport CreateService from './CreateService';\n\n\nconst CreateServiceContianer: React.FC = () => {\n  const dispatch = useDispatch();\n\n  const onServiceCreateAction = () => {\n    dispatch(createServiceThunk());\n  };\n\n  return (\n    <CreateService onServiceCreateAction={onServiceCreateAction} />\n  );\n}\n\nexport default CreateServiceContianer;\n","import ServiceItem from './ServiceItem';\n\nexport default interface Service {\n    date: Date;\n    mileage: number;\n    dealer: string;\n    bmw: boolean;\n    status: string;\n    items: ServiceItem[];\n};;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;\n\nexport const createServiceObject = (): Service => ({\n  date: new Date(),\n  mileage: 0,\n  dealer: '',\n  bmw: false,\n  status: '1',\n  items: [],\n});\n","import {AnyAction} from 'redux';\nimport {ThunkDispatch} from 'redux-thunk';\nimport Service from '../../model/Service';\nimport ServiceItem, {createServiceItemObject} from '../../model/ServiceItem';\nimport {ServiceType} from '../../model/ServiceType';\nimport {ServicesAvailableAction} from '../actions/ServiceAction';\nimport {ApplicationStore} from '../reducers';\n\nexport const parseServiceFromFileThunk = (serviceContent: string) => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const lines = serviceContent.split('\\n').map((line) => line.replaceAll('\\r', ''));\n\n  console.log(lines);\n  // manage the first line\n  let index = 1;\n  const services: Service[] = [];\n  for (; index < lines.length; index++) {\n    const service = getServiceFromALine(lines[index]);\n    service && services.push(service);\n  }\n  dispatch(ServicesAvailableAction(services));\n};\n\nexport const getServiceFromALine = (line: string): Service | null => {\n  const parts = line.split('|');\n  if (parts.length <= 4) {\n    return null;\n  }\n  const servicePart = parts[4].split(';');\n  if (servicePart.length < 8) {\n    return null;\n  }\n  return {\n    date: new Date(parseInt(servicePart[2]), parseInt(servicePart[1]) - 1, parseInt(servicePart[0])),\n    mileage: parseInt(servicePart[4]),\n    dealer: servicePart[6],\n    bmw: servicePart[5] === '1',\n    status: '0x1', // TODO: support status type\n    items: getServiceItemsFromAnArray(servicePart.filter((_, i) => i > 7)),\n  };\n};\n\nexport const getServiceItemsFromAnArray = (array: string[]): ServiceItem[] => {\n  if (!array.length) {\n    return [];\n  }\n  const size = parseInt(array[0]);\n  if (size * 4 + 1 !== array.length) {\n    return [];\n  }\n  const itemsArray = array.slice(1);\n  const items: ServiceItem[] = [];\n  for (let index = 0; index < itemsArray.length; ) {\n    items.push({\n      ...createServiceItemObject(),\n      serviceType: itemsArray[index] as ServiceType,\n    });\n    index += 4;\n  }\n  return items;\n};\n\nexport const saveToFileThunk = () => (\n    dispatch: ThunkDispatch<ApplicationStore, null, AnyAction>,\n    getState: () => ApplicationStore,\n) => {\n  const services = getState().servicesReducer.services;\n  const fileContent = getClearServiceLine() + servicesToFileContent(services, 2);\n  saveToFileAction('service.tst', fileContent);\n};\n\nconst getClearServiceLine = (): string => {\n  return '1|g_mmi|steuern_servicehistory_erase\\n';\n};\n\nexport const servicesToFileContent = (services: Service[], startingIndex: number = 1): string => {\n  return services.map((s, i) => serviceToString(s, i + startingIndex)).join('\\n');\n};\n\nexport const serviceToString = (service: Service, index: number): string => {\n  return '' + index + '|g_mmi|steuern_servicehistory_add||' +\n    service.date.getDate() + ';' + (service.date.getMonth() + 1) + ';' + service.date.getFullYear() +\n    ';0;' + service.mileage + ';' + (service.bmw ? '1' : '0') + ';' + service.dealer + ';0x1;' +\n    serviceItemsToString(service.items);\n};\n\nexport const serviceItemsToString = (items: ServiceItem[]): string => {\n  return '' + items.length + ';' + items.map((item) => '' + item.serviceType + ';' + item.status + ';0;0').join(';');\n};\n\nconst saveToFileAction = (filename: string, text: string) => {\n  const element = document.createElement('a');\n  element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n  element.setAttribute('download', filename);\n\n  element.style.display = 'none';\n  document.body.appendChild(element);\n\n  element.click();\n\n  document.body.removeChild(element);\n};\n","import {Button} from '@material-ui/core';\n\nexport interface DownloadServiceProps {\n    onDowloadClick: () => void;\n};\n\nconst DownloadService: React.FC<DownloadServiceProps> = (props) => {\n  const {onDowloadClick} = props;\n  return (<Button variant=\"outlined\" color=\"primary\" onClick={onDowloadClick}>Save Services to file</Button>);\n}\n\nexport default DownloadService;\n","import {FC} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {saveToFileThunk} from '../../../redux/thunks/FileThunk';\nimport DownloadService from './DownloadService';\n\nconst DownloadServiceContainer: FC = () => {\n  const dispatch = useDispatch();\n\n  const onDowloadAction = () => {\n    dispatch(saveToFileThunk());\n  };\n\n  return (\n    <>\n      <DownloadService onDowloadClick={onDowloadAction}/>\n    </>\n  );\n}\n\nexport default DownloadServiceContainer;\n","import {Button} from '@material-ui/core';\nimport {ChangeEvent, useRef} from 'react';\n\nexport interface FileUploadProps {\n    onServiceUploaded: (fileContent: string) => void;\n};\n\nconst ServiceUpload: React.FC<FileUploadProps> = (props) => {\n  const {onServiceUploaded} = props;\n  const inputEl = useRef(null);\n\n  const openInput = () => {\n    inputEl.current && ((inputEl.current as unknown) as HTMLInputElement).click()\n  };\n\n  const parseFile = (e: ChangeEvent<HTMLInputElement>) => {\n    e.preventDefault()\n    if (!e.target || !e.target.files || !e.target.files.length) {\n      return;\n    }\n\n    const reader = new FileReader()\n    reader.onload = async (e) => {\n      const text = e.target && e.target.result?.toString();\n      if (text) {\n        onServiceUploaded(text);\n      } else {\n        alert('Something went wrong. Try again');\n      }\n    };\n    reader.readAsText(e.target.files[0])\n  };\n\n  return (\n    <>\n      <input ref={inputEl} type='file' hidden onChange={parseFile}/>\n      <Button variant=\"outlined\" color=\"primary\" onClick={openInput}>Upload Service file</Button>\n    </>\n  );\n}\n\nexport default ServiceUpload;\n","import {FC} from 'react';\nimport {useDispatch} from 'react-redux';\nimport {parseServiceFromFileThunk} from '../../../redux/thunks/FileThunk';\nimport ServiceUpload from './ServiceUpload';\n\nconst ServiceUploadContainer: FC = () => {\n  const dispatch = useDispatch();\n\n  const onServiceUploaded = (serviceContent: string) => {\n    dispatch(parseServiceFromFileThunk(serviceContent));\n  };\n\n  return (\n    <>\n      <ServiceUpload onServiceUploaded={onServiceUploaded}/>\n    </>\n  );\n}\n\nexport default ServiceUploadContainer;\n","import {FC} from 'react';\nimport CreateServiceContianer from './createService/CreateServiceContianer';\nimport DownloadServiceContainer from './downloadService/DownloadServiceContainer';\nimport ServiceUploadContainer from './loadService/ServiceUploadContainer';\n\nconst ServiceActionsContainer: FC = () => {\n  return (\n    <>\n      <ServiceUploadContainer />\n      <CreateServiceContianer />\n      <DownloadServiceContainer />\n    </>\n  );\n}\n\nexport default ServiceActionsContainer;\n","import './App.css';\nimport ServiceContainer from './app/service/ServiceContainer';\nimport ServiceActionsContainer from './app/serviceActions/ServiceActionsContainer';\n\n/**\n * Main App\n * @return {App} App\n */\nfunction App() {\n  return (\n    <div className=\"App\">\n      <ServiceActionsContainer />\n      <ServiceContainer />\n    </div>\n  );\n}\n\nexport default App;\n","import Service from '../../model/Service';\nimport {DispatchedServicesAction} from '../actions/ServiceAction';\nimport {SERVICES_AVAILABLE} from '../actions/ServiceActionTypes';\n\nexport interface ServicesReducerStore {\n    services: Service[];\n}\n\nexport const servicesReducerInitialState: ServicesReducerStore = {\n  services: [],\n};\n\nconst ServicesReducer = (\n    state = servicesReducerInitialState,\n    action: DispatchedServicesAction,\n): ServicesReducerStore => {\n  switch (action.type) {\n    case SERVICES_AVAILABLE:\n      return {\n        ...state,\n        services: action.payload,\n      };\n    default:\n      return {\n        ...state,\n      };\n  }\n};\nexport default ServicesReducer;\n","import {Action, AnyAction, createStore, Store, compose, applyMiddleware} from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport {ApplicationStore, reducers} from './reducers';\n\nconst composeEnhancer = (window && (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\n/**\n * Configures Application store. Can have a initializing state: preloadedState.\n * @param {ApplicationStore} preloadedState state to initialize with.\n * @return {Store<ApplicationStore>} configured application store.\n */\nexport default function condfigureStore(preloadedState?: ApplicationStore): Store<ApplicationStore> {\n  return createStore<ApplicationStore, Action<AnyAction>, unknown, unknown>(\n      reducers(),\n      preloadedState,\n      composeEnhancer(applyMiddleware(thunk, logger)),\n  );\n};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport configureStore from './redux/configureStore';\nimport {Provider} from 'react-redux';\n\nexport const store = configureStore();\n\nReactDOM.render(\n    <React.StrictMode>\n      <Provider store={store}>\n        <App />\n      </Provider>\n    </React.StrictMode>,\n    document.getElementById('root'),\n);\n","import {combineReducers, Reducer} from 'redux';\nimport ServicesReducer, {ServicesReducerStore} from './ServiceReducer';\n\nexport interface ApplicationStore {\n    servicesReducer: ServicesReducerStore;\n}\n\nexport const reducers = (): Reducer<ApplicationStore> => combineReducers<ApplicationStore>({\n  servicesReducer: ServicesReducer,\n});\n"],"sourceRoot":""}